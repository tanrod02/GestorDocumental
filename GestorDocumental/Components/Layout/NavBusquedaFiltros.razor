@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IEtiquetasService EtiquetasService


<div class="search-filters-container">
    <h3 class="title">Búsqueda</h3>
    <div class="search-bar">
        <RadzenTextBox @bind-Value="keyword" Placeholder="Buscar..." class="search-input" />
        <RadzenButton Icon="search" Click="Buscar" class="search-button" />
    </div>

    <h4 class="subtitle">Filtros</h4>

    <div class="filter-item">
        <RadzenCheckBox @bind-Value="filtroRecientes" />
        <label class="filter-label">Fecha subida más reciente</label>
    </div>

    <div class="filter-item">
        <RadzenCheckBox @bind-Value="filtroMasVistos" />
        <label class="filter-label">Documentos más vistos</label>
    </div>

    <h5 class="filter-subtitle">Etiquetas</h5>

    <RadzenTextBox @bind-Value="etiquetaFiltro" Placeholder="Buscar etiquetas..." Style="width: 100%;" />
    <RadzenListBox @bind-Value="selectedTags" Data="etiquetasFiltradas" TextProperty="DescripcionEtiqueta"
                   ValueProperty="CodigoEtiqueta" Multiple="true" class="tag-list" />



</div>


@code {

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<bool> IsExpandedChanged { get; set; }


    private string keyword = "";
    private bool filtroRecientes = false;
    private bool filtroMasVistos = false;

    private string etiquetaFiltro = null;
    private List<string> selectedTags = new();
    private List<Etiqueta> etiquetas = new List<Etiqueta>();
    private List<Etiqueta> etiquetasFiltradas => string.IsNullOrWhiteSpace(etiquetaFiltro)
       ? etiquetas
       : etiquetas.Where(tag => tag.DescripcionEtiqueta.Contains(etiquetaFiltro, StringComparison.OrdinalIgnoreCase)).ToList();




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BuscarEtiquetas();
        }

    }

    private async Task BuscarEtiquetas()
    {
        try
        {

            etiquetas = await EtiquetasService.ObtenerEtiquetas();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en BuscarArchivos: {e.Message}");
        }
    }


    private void Buscar()
    {
        Navigation.NavigateTo($"/ResultadoBusqueda/{keyword}");
        StateHasChanged();
    }
}
