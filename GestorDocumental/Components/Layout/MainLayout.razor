@using Microsoft.AspNetCore.Components
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@inject NavigationManager Navigation
@inject IArchivoService ArchivoService
@inject ICursoService CursoService

@inherits LayoutComponentBase
<RadzenComponents @rendermode="InteractiveServer" />

<div class="contenedor">
    <!-- Barra lateral izquierda (Menú de navegación) -->
    <div class="sidebar">
        <NavMenu />
    </div>

    <!-- Contenido principal -->
    <main class="contenido-principal">
        <article class="content px-4">
            @Body
            <RadzenDialog />
        </article>
    </main>

    <!-- Botón flotante para abrir la barra de búsqueda -->
    <button class="boton-flotante" @onclick="AbrirBusqueda">
        🔍 Buscar
    </button>

    <!-- Barra lateral derecha (Búsqueda de archivos, oculta inicialmente) -->
    <div class="sidebar-derecha @(mostrarBusqueda ? "visible" : "")">
        <RadzenCard Style="padding: 20px; max-width: 300px;">
            <div class="header-busqueda">
                <h3>Buscar Archivo</h3>
                <button class="boton-cerrar" @onclick="CerrarBusqueda">✖</button>
            </div>

            <RadzenTextBox @bind-Value="textoBusqueda"
                           Placeholder="Ingrese el nombre del archivo..."
                           Style="width: 100%;" />

            <RadzenButton Text="Buscar"
                          Click="BuscarArchivo"
                          ButtonStyle="ButtonStyle.Primary"
                          Style="margin-top: 10px; width: 100%;" />

            <ul class="lista-archivos">
                @if (resultadosBusqueda.Any())
                {
                    @foreach (var archivo in resultadosBusqueda)
                    {
                        <li class="archivo-item" @onclick="@(() => VerArchivo(archivo))">
                            📄 @archivo.NombreArchivo
                        </li>
                    }
                }
                else if (busquedaRealizada)
                {
                    <li>No se encontraron archivos.</li>
                }
            </ul>
        </RadzenCard>
    </div>
</div>

<!-- Mensaje de error Blazor -->
<div id="blazor-error-ui">
    Ha ocurrido un error inesperado.
    <a href="" class="reload">Recargar</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool mostrarBusqueda = false;
    private string textoBusqueda = "";
    private List<Archivo> resultadosBusqueda = new();
    private bool busquedaRealizada = false;

    private void AbrirBusqueda() => mostrarBusqueda = true;
    private void CerrarBusqueda() => mostrarBusqueda = false;

    private async Task BuscarArchivo()
    {
        // if (!string.IsNullOrWhiteSpace(textoBusqueda))
        // {
        //     resultadosBusqueda = (await ArchivoService.ObtenerArchivosAsync())
        //                         .Where(a => a.NombreArchivo.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase))
        //                         .ToList();
        // }
        // else
        // {
        //     resultadosBusqueda.Clear();
        // }

        busquedaRealizada = true;
        StateHasChanged();
    }

    private void VerArchivo(Archivo archivo)
    {
    //     Navigation.NavigateTo($"/archivo/{archivo.Id}");
    }
}
