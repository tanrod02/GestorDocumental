@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using GestorDocumental.Components.Pages
@rendermode InteractiveServer
@inject ICursoService CursoService
@inject AuthService AuthenticationService
@using Microsoft.AspNetCore.Authentication
@using Radzen
@using Radzen.Blazor
@inject DialogService DialogService
@inject Radzen.DialogService DialogService


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TANVIC DOCS</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
                🏠 Home
            </NavLink>
        </div>

        @if (cursos != null && cursos.Any())
        {
            @foreach (Curso curso in cursos)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@($"/home/{curso.CodigoCurso}")">
                        📖 @curso.Descripcion
                    </NavLink>
                </div>
            }
        }
        else
        {
            <div class="nav-item px-3" style="color: #ffeb3b;">
                No hay cursos disponibles.
            </div>
        }

        <!-- Botón para abrir el modal -->
        <div class="nav-item px-3 mt-4 text-center">
            <button class="boton-agregar" @onclick="AbrirModal">
                ➕ Añadir curso
            </button>
        </div>
    </nav>
</div>



@code {
    private Usuario usuarioActual = new Usuario();

    private List<Curso> cursos = new();
    private bool mostrarModal = false;
    private Curso nuevoCurso = new();
    private bool modalAbierto = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cursos = (await CursoService.ObtenerCursosAsync()).ToList();
    }

    async Task AbrirModal()
    {
        if (modalAbierto) return;
        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<CrearCurso>("Crear Curso", new Dictionary<string, object>
        {
           { "CodigoUsuario", usuarioActual.CodigoUsuario }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbierto = false;

        cursos = (await CursoService.ObtenerCursosAsync()).ToList();
        StateHasChanged();
    }

    private void CerrarModal() => mostrarModal = false;

    
}
