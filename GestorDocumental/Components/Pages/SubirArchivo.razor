@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject IEmailService EmailService
@inject IEtiquetasService EtiquetasService
@inject IUsuarioService UsuarioService
@inject DialogService DialogService
@inject AuthService AuthenticationService
@rendermode InteractiveServer

<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">
    <div style="display: flex; flex-direction: column; gap: 15px;">
        <div>
            <label>Selecciona un archivo: (*)</label>
            <RadzenUpload @ref="upload"
            Auto="false"
            Multiple="false"
            Change="OnFileSelected"
            Progress="@(args => OnProgress(args))"
            Style="width: 100%" 
            ChooseText="Seleccionar archivo" />

            @if (!archivoSeleccionado)
            {
                <div style="color: red;">Debes seleccionar un archivo.</div>
            }
        </div>

        <div>
            <label><b>Etiquetas:</b></label>
            <div style="display: flex; gap: 10px;">
                <!-- AutoComplete para buscar etiquetas existentes o escribir una nueva -->
                <RadzenAutoComplete @bind-Value="nuevaEtiqueta"
                Data="@etiquetas.Select(e => e.DescripcionEtiqueta).ToList()"
                Placeholder="Escribe o selecciona una etiqueta..."
                Style="flex-grow: 1;"
                AllowClear="true" />

                <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Primary" Click="AgregarEtiqueta"/>
            </div>
        </div>

        @if (listaEtiquetas.Any())
        {
            <div class="etiquetas" style="display: flex; flex-wrap: wrap; gap: 10px;">
                @foreach (var etiqueta in listaEtiquetas)
                {
                    <span class="etiqueta" style="display: flex; align-items: center; background: #e0e0e0; padding: 5px 10px; border-radius: 5px;">
                        @etiqueta
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@(() => EliminarEtiqueta(etiqueta))" Size="ButtonSize.Small" Style="margin-left: 5px;" />
                    </span>
                }
            </div>
        }

        <div>
            <label>Fecha de vencimiento:</label>
            <RadzenDatePicker Value="@archivoSubido.FechaBaja" ValueChanged="@((DateTime? value) => archivoSubido.FechaBaja = value)" ShowTime="false" DateFormat="dd/MM/yyyy"/>

        </div>

        <div>
            <label>Grupo: (*)</label>
            <RadzenDropDown 
            @bind-Value="archivoSubido.Grupo" 
            Data="@grupos" 
            TextProperty="Grupo" 
            ValueProperty="Grupo" 
            Placeholder="Selecciona un grupo" 
            Style="width: 100%;" />
            @if (grupoNoSeleccionado)
            {
                <div style="color: red;">El grupo es obligatorio.</div>
            }
        </div>


        <div style="display: flex; align-items: center; gap: 10px;">
            <RadzenCheckBox @bind-Value="archivoSubido.Visible" TriState="false" />
            <label>Visible</label>
        </div>

        <div class="botones" style="display: flex; justify-content: space-between;">
            <RadzenButton Text="Guardar"
            Click="ConfirmarSubida"
            ButtonStyle="ButtonStyle.Primary" />

            <RadzenButton Text="Cancelar"
            ButtonStyle="ButtonStyle.Secondary"
            Click="CancelarSubida" />
        </div>
    </div>
</RadzenCard>


@code {
    RadzenUpload upload;

    [Parameter] public int CodigoCurso { get; set; }
    [Parameter] public int CodigoUsuario { get; set; }
    [Parameter] public int CodigoCarpeta { get; set; }
    [Parameter] public string Grupo { get; set; }

    private Archivo archivoSubido = new() { };
    private List<Etiqueta> etiquetas = new();
    private string nuevaEtiqueta = "";
    private List<string> listaEtiquetas = new();
    private List<Grupos> grupos = new();

    bool archivoSeleccionado = false;
    bool grupoNoSeleccionado = false;

    protected override async Task OnInitializedAsync()
    {
        etiquetas = await EtiquetasService.ObtenerEtiquetas();

        grupos = await ArchivoService.ObtenerGruposPorCurso(CodigoCurso);

        if (!string.IsNullOrEmpty(Grupo)){
            archivoSubido.Grupo = Grupo;
        }

        archivoSubido.Visible = true;
    }


    private void OnProgress(UploadProgressArgs args)
    {
        StateHasChanged();
    }

    private async Task OnFileSelected(UploadChangeEventArgs args)
    {
        var archivo = args.Files.FirstOrDefault();
        if (archivo != null)
        {
            try
            {
                using (var stream = new MemoryStream())
                {
                    await archivo.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024).CopyToAsync(stream);
                    stream.Position = 0;

                    archivoSubido.NombreArchivo = archivo.Name;
                    archivoSubido.Tipo = archivo.ContentType;
                    archivoSubido.Tamaño = (int)archivo.Size;
                    archivoSubido.Contenido = stream.ToArray();
                    archivoSubido.FechaAlta = DateTime.Now;
                    archivoSubido.Curso = CodigoCurso;
                    archivoSubido.Propietario = CodigoUsuario;
                    if(CodigoCarpeta > 0){
                        archivoSubido.CodigoCarpeta = CodigoCarpeta;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al procesar el archivo: {ex.Message}");
            }

            archivoSeleccionado = !archivoSeleccionado;

        }
    }


    private void CancelarArchivo()
    {
        archivoSubido = new Archivo();
        StateHasChanged();
    }

    private void AgregarEtiqueta()
    {
        if (!string.IsNullOrWhiteSpace(nuevaEtiqueta) && !listaEtiquetas.Contains(nuevaEtiqueta))
        {
            listaEtiquetas.Add(nuevaEtiqueta);
            nuevaEtiqueta = "";

            StateHasChanged();
        }
    }

    private void EliminarEtiqueta(string etiqueta)
    {
        listaEtiquetas.Remove(etiqueta);
        StateHasChanged();
    }

    private async Task ConfirmarSubida()
    {
        Usuario usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();

        grupoNoSeleccionado = string.IsNullOrEmpty(archivoSubido.Grupo);
        if (!archivoSeleccionado || grupoNoSeleccionado)
        {
            return;
        }

        var confirmacion = await DialogService.Confirm("¿Subir este documento?", "Confirmar subir documento",
           new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });

        if (confirmacion == true)
        {
            await ArchivoService.GuardarArchivoAsync(archivoSubido);

            if (listaEtiquetas.Any())
            {
                List<Etiqueta> etiquetasAgregarBD = new List<Etiqueta>();
                foreach (string etiqueta in listaEtiquetas)
                {
                    Etiqueta? etiquetaBD = etiquetas.FirstOrDefault(e => e.DescripcionEtiqueta == etiqueta);
                    if (etiquetaBD == null)
                    {
                        Etiqueta etiquetaNueva = new() { DescripcionEtiqueta = etiqueta };
                        etiquetaBD = await EtiquetasService.CrearEtiqueta(etiquetaNueva);
                        etiquetas.Add(etiquetaBD);
                    }
                    etiquetasAgregarBD.Add(etiquetaBD);
                }

                await EtiquetasService.AgregarEtiquetasArchivo(archivoSubido.CodigoArchivo, etiquetasAgregarBD);
            }

            List<Usuario> usuarios = await UsuarioService.ObtenerUsuariosPorGrupo(Convert.ToInt32(archivoSubido.Curso), archivoSubido.Grupo);

            foreach(Usuario user in usuarios){

                string subject = "Documento subido correctamente";
                string body = $"Hola {user.Nombre}, se ha subido el documento '{archivoSubido.NombreArchivo}' a tu curso.";
                await EmailService.EnviarCorreoAsync(user.Correo, subject, body);

            }

            DialogService.Close(true);
        }
    }


    private void CancelarSubida()
    {
        DialogService.Close(false);
    }
}
