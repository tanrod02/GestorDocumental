@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject DialogService DialogService
@rendermode InteractiveServer

<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">
    <div style="display: flex; flex-direction: column; gap: 15px;">
        <div>
            <label>Selecciona un archivo:</label>
            <RadzenUpload @ref="upload"
            Auto="false"
            Multiple="false"
            Change="OnFileSelected"
            Progress="@(args => OnProgress(args))"
            Style="width: 100%" 
            ChooseText="Seleccionar archivo" />
        </div>

        <div>
            <label>Etiquetas:</label>
            <div class="input-con-boton" style="display: flex; gap: 10px;">
                <RadzenTextBox @bind-Value="nuevaEtiqueta" Placeholder="Añadir etiqueta..." Style="flex-grow: 1;" />
                <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Primary" Click="@AgregarEtiqueta" />
            </div>
        </div>

        @if (listaEtiquetas.Any())
        {
            <div class="etiquetas" style="display: flex; flex-wrap: wrap; gap: 10px;">
                @foreach (var etiqueta in listaEtiquetas)
                {
                    <span class="etiqueta" style="display: flex; align-items: center; background: #e0e0e0; padding: 5px 10px; border-radius: 5px;">
                        @etiqueta
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@(() => EliminarEtiqueta(etiqueta))" Size="ButtonSize.Small" Style="margin-left: 5px;" />
                    </span>
                }
            </div>
        }

        <div>
            <label>Fecha de vencimiento:</label>
            <RadzenDatePicker Value="@fechaSeleccionada" ValueChanged="@((DateTime? value) => fechaSeleccionada = value)" />
        </div>

        <div>
            <label>Grupo:</label>
            <RadzenTextBox @bind-Value="archivoSubido.Grupo" Placeholder="Grupo" Style="width: 100%;" />
        </div>

        <div style="display: flex; align-items: center; gap: 10px;">
            <RadzenCheckBox @bind-Value="archivoSubido.Visible" TriState="false" />
            <label>Visible</label>
        </div>

        <div class="botones" style="display: flex; justify-content: space-between;">
            <RadzenButton Text="Guardar"
            Click="ConfirmarSubida"
            ButtonStyle="ButtonStyle.Primary" />

            <RadzenButton Text="Cancelar"
            ButtonStyle="ButtonStyle.Secondary"
            Click="CancelarSubida" />
        </div>
    </div>
</RadzenCard>


@code {
    RadzenUpload upload;

    [Parameter] public int CodigoCurso { get; set; }
    [Parameter] public int CodigoUsuario { get; set; }

    private Archivo archivoSubido = new() { };
    private string nuevaEtiqueta = "";
    private List<string> listaEtiquetas = new();
    private DateTime? fechaSeleccionada = null;

    private void OnProgress(UploadProgressArgs args)
    {
        StateHasChanged();
    }

    private async Task OnFileSelected(UploadChangeEventArgs args)
{
    var archivo = args.Files.FirstOrDefault();
    if (archivo != null)
    {
        try
        {
            using (var stream = new MemoryStream())
            {
                await archivo.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024).CopyToAsync(stream);
                stream.Position = 0;
                
                archivoSubido.NombreArchivo = archivo.Name;
                archivoSubido.Tipo = archivo.ContentType;
                archivoSubido.Tamaño = (int)archivo.Size;
                archivoSubido.Contenido = stream.ToArray();
                archivoSubido.FechaAlta = DateTime.Now;
                archivoSubido.Curso = CodigoCurso;
                archivoSubido.Propietario = CodigoUsuario;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al procesar el archivo: {ex.Message}");
        }
    }
}


    private void CancelarArchivo()
    {
        archivoSubido = new Archivo();
        StateHasChanged();
    }

    private void AgregarEtiqueta()
    {
        if (!string.IsNullOrWhiteSpace(nuevaEtiqueta) && !listaEtiquetas.Contains(nuevaEtiqueta))
        {
            listaEtiquetas.Add(nuevaEtiqueta);
            nuevaEtiqueta = "";

            StateHasChanged();
        }
    }

    private void EliminarEtiqueta(string etiqueta)
    {
        listaEtiquetas.Remove(etiqueta);
        StateHasChanged();
    }

    private async Task ConfirmarSubida()
    {
        archivoSubido.FechaBaja = fechaSeleccionada;
        archivoSubido.Etiquetas = string.Join(";", listaEtiquetas);

        await ArchivoService.GuardarArchivoAsync(archivoSubido);
        await ArchivoService.VerificarArchivoGuardadoEnDB(archivoSubido.NombreArchivo);

        DialogService.Close(true); // Se cierra el modal y se indica que hubo un archivo subido
    }

    private void CancelarSubida()
    {
        DialogService.Close(false);
    }
}
