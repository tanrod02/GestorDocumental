@page "/subir-archivo/{CodigoCurso:int}"
@layout SecondLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@rendermode InteractiveServer
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JS


<h1 class="titulo-subida">Subir Archivo</h1>

<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">
    <label>Selecciona un archivo:</label>
    <RadzenUpload @ref="upload"
                  Auto="false"
                  Multiple="false"
                  Change="OnFileSelected"
                  Progress="@(args => OnProgress(args))"
                  Style="width: 100%" />


    @if (archivoSubido.Contenido != null)
    {
        <div class="archivo-seleccionado"
             style="margin-top: 10px; padding: 10px; background: #f5f5f5; border-radius: 8px; display: flex; justify-content: space-between; align-items: center;">
            <span>@archivoSubido.NombreArchivo (@archivoSubido.Tamaño KB)</span>
            <RadzenButton Icon="close"
                          ButtonStyle="ButtonStyle.Danger"
                          Click="CancelarArchivo"
                          Size="ButtonSize.Small" />
        </div>
    }

  @*   Sacamos las etiquetas como lista dinamica para añadir una a una *@ 
    <div class="campo">
        <label>Etiquetas:</label>
        <div class="input-con-boton">
            <RadzenTextBox @bind-Value="nuevaEtiqueta" Placeholder="Añadir etiqueta..." Style="width: 85%;" />
            <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Primary" Click="@AgregarEtiqueta" Style="margin-left: 5px;" />
        </div>
    </div>

    @if (listaEtiquetas.Any())
    {
        <div class="etiquetas">
            @foreach (var etiqueta in listaEtiquetas)
            {
                <span class="etiqueta">
                    @etiqueta
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Click="@(() => EliminarEtiqueta(etiqueta))" Size="ButtonSize.Small" />
                </span>
            }
        </div>
    }

   @*  Usamos un calendario de radzen para escoger la Fecha Baja *@
    <div class="campo">
        <label>Fecha de vencimiento:</label>
        <RadzenDatePicker Value="@fechaSeleccionada" ValueChanged="@((DateTime? value) => fechaSeleccionada = value)" />


    </div>

    <div class="campo">
        <label>Grupo:</label>
        <RadzenTextBox @bind-Value="archivoSubido.Grupo" Placeholder="Grupo" Style="width: 100%;" />
    </div>

    <div class="campo">
        <RadzenCheckBox @bind-Value="archivoSubido.Visible" TriState="false" />
        <label>Visible</label>
    </div>

    <div class="botones">
        <RadzenButton Text="Guardar"
                      Click="ConfirmarSubida"
                      ButtonStyle="ButtonStyle.Primary" />

        <RadzenButton Text="Cancelar"
                      ButtonStyle="ButtonStyle.Secondary"
                      Click="CancelarSubida" />
    </div>

</RadzenCard>

@code {
    RadzenUpload upload;

    [Parameter] public int CodigoCurso { get; set; }
    private Archivo archivoSubido = new() { Visible = true }; 
    private string nuevaEtiqueta = "";
    private List<string> listaEtiquetas = new();
    private DateTime? fechaSeleccionada = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", "document.dispatchEvent(new Event('DOMContentLoaded'))");
        }
    }


    private void OnProgress(UploadProgressArgs args)
    {
        StateHasChanged();
    }

    private async Task OnFileSelected(UploadChangeEventArgs args)
    {
        var archivo = args.Files.FirstOrDefault();
        if (archivo != null)
        {
            using var memoryStream = new MemoryStream();
            await archivo.OpenReadStream().CopyToAsync(memoryStream);

            archivoSubido.NombreArchivo = archivo.Name;
            archivoSubido.Tipo = archivo.ContentType;
            archivoSubido.Tamaño = (int)archivo.Size;
            archivoSubido.Curso = CodigoCurso;
            archivoSubido.FechaAlta = DateTime.Now;
            archivoSubido.Contenido = memoryStream.ToArray();

            

            await InvokeAsync(StateHasChanged);
        }
    }





    private void CancelarArchivo()
    {
        archivoSubido = new Archivo();
        StateHasChanged();
    }

    private void AgregarEtiqueta()
    {
        if (!string.IsNullOrWhiteSpace(nuevaEtiqueta) && !listaEtiquetas.Contains(nuevaEtiqueta))
        {
            listaEtiquetas.Add(nuevaEtiqueta);
            nuevaEtiqueta = "";

            StateHasChanged();
        }
    }

    private void EliminarEtiqueta(string etiqueta)
    {
        listaEtiquetas.Remove(etiqueta);
        StateHasChanged();
    }


    private async Task ConfirmarSubida()
    {
        archivoSubido.FechaBaja = fechaSeleccionada;
        archivoSubido.Etiquetas = string.Join(";", listaEtiquetas);

        await ArchivoService.GuardarArchivoAsync(archivoSubido);

        Navigation.NavigateTo("/");

        await JS.InvokeVoidAsync("closeModal");
        
    }


    private void CancelarSubida()
    {
        Navigation.NavigateTo("/");
    }
}
