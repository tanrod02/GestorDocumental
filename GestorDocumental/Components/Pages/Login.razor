@page "/"
@using GestorDocumental.Business.Services
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager Navigation
@inject AuthService AuthService
@rendermode InteractiveServer


<div class="login-background">
    <div class="card login-card">
        <h3 class="text-center">Iniciar Sesión</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />

            @if (loginError)
            {
                <div class="text-danger text-center mt-2">
                    El correo o la contraseña son incorrectos.
                </div>
            }

            <div class="mb-3">
                <label for="correo" class="form-label">Correo:</label>
                <InputText id="correo" class="form-control"
                           @bind-Value="loginModel.Correo" 
                           @oninput="LimpiarError"/>
                <ValidationMessage For="@(() => loginModel.Correo)"
                                   class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="contraseña" class="form-label">Contraseña:</label>
                <div class="input-group">
                    <InputText id="contraseña"
                               type="@contraseñaTipo"
                               class="form-control"
                               @bind-Value="loginModel.Contraseña" 
                               @oninput="LimpiarError"/>
                    <button type="button"
                            class="btn btn-outline-secondary"
                            @onclick="TogglePasswordVisibility">
                        <i class="bi @iconoOjo"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => loginModel.Contraseña)"
                                   class="text-danger" />
            </div>

          
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Ingresar</button>
            </div>
        </EditForm>


        <div class="text-center mt-3">
            <span>¿No tienes cuenta? </span>
            <a href="register" class="text-primary" style="cursor: pointer;">Regístrate aquí</a>
        </div>
    </div>
</div>

<div id="blazor-error-ui">
    Ha ocurrido un error inesperado.
    <a href="" class="reload">Recargar</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private string contraseñaTipo = "password"; 
    private string iconoOjo = "bi-eye-slash";  
    private bool loginError = false;  

    @code {
        private async Task HandleLogin()
        {
            try
            {
                var isAuthenticated = await AuthService.LoginAsync(loginModel.Correo, loginModel.Contraseña);
                if (isAuthenticated)
                {
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    loginError = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en el login: {ex.Message}");
            }
            StateHasChanged();
        }
    }


    private void TogglePasswordVisibility()
    {
        if (contraseñaTipo == "password")
        {
            contraseñaTipo = "text";  
            iconoOjo = "bi-eye";    
        }
        else
        {
            contraseñaTipo = "password";  
            iconoOjo = "bi-eye-slash";   
        }

        StateHasChanged(); 
    }

    private void LimpiarError()
    {
        loginError = false;
    }


    public class LoginModel
    {
        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "El formato del correo no es válido")]
        public string Correo { get; set; }
        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Contraseña { get; set; }
    }
}
