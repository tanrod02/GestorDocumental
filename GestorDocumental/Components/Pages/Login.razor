@page "/"
@using GestorDocumental.Business.Services
@inject NavigationManager Navigation
@inject AuthService AuthService
@rendermode InteractiveServer

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow p-4" style="width: 400px;">
        <h3 class="text-center">Iniciar Sesión</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Campo de Correo -->
            <div class="mb-3">
                <label for="correo" class="form-label">Correo:</label>
                <InputText id="correo" @bind-Value="loginModel.Correo" class="form-control" />
            </div>

            <!-- Campo de Contraseña -->
            <div class="mb-3">
                <label for="contraseña" class="form-label">Contraseña:</label>
                <div class="input-group">
                    <InputText id="contraseña" type="@contraseñaTipo" @bind-Value="loginModel.Contraseña" class="form-control" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <i class="bi @iconoOjo"></i>  <!-- Aquí se cambia el icono según la visibilidad -->
                    </button>
                </div>
            </div>

            <!-- Botón de Login -->
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Ingresar</button>
            </div>
        </EditForm>

        <!-- Opción de Registro -->
        <div class="text-center mt-3">
            <span>¿No tienes cuenta? </span>
            <a href="register" class="text-primary" style="cursor: pointer;">Regístrate aquí</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string contraseñaTipo = "password"; // Estado inicial de la contraseña
    private string iconoOjo = "bi-eye-slash"; // Estado inicial del icono (ocultar)
    private bool isAuthenticated = false;

    private async Task HandleLogin()
    {
        var isAuthenticated = await AuthService.LoginAsync(loginModel.Correo, loginModel.Contraseña);

        if (isAuthenticated)
        {
            Navigation.NavigateTo("/home");  // Aquí se redirige a la página principal
        }
        else
        {
            // Mostrar un mensaje de error si las credenciales son incorrectas
            Console.WriteLine("Credenciales incorrectas.");
        }
    }

    private void TogglePasswordVisibility()
    {
        if (contraseñaTipo == "password")
        {
            contraseñaTipo = "text"; // Cambiar a texto para ver la contraseña
            iconoOjo = "bi-eye";    // Cambiar icono a "ojo abierto"
        }
        else
        {
            contraseñaTipo = "password"; // Cambiar a password para ocultarla
            iconoOjo = "bi-eye-slash";  // Cambiar icono a "ojo cerrado"
        }

        StateHasChanged(); // Forzar re-renderización de la UI
    }

    public class LoginModel
    {
        public string Correo { get; set; }
        public string Contraseña { get; set; }
    }
}
