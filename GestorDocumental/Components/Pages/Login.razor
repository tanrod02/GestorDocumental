@page "/"
@using GestorDocumental.Business.Services
@inject NavigationManager Navigation
@inject AuthService AuthService
@rendermode InteractiveServer


<div class="login-background">
    <div class="card login-card">
        <h3 class="text-center">Iniciar Sesión</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Campo de Correo -->
            <div class="mb-3">
                <label for="correo" class="form-label">Correo:</label>
                <InputText id="correo"
                           @bind-Value="loginModel.Correo"
                           class="@(correoIncorrecto ? "form-control is-invalid" : "form-control")" />
            </div>

            <!-- Campo de Contraseña -->
            <div class="mb-3">
                <label for="contraseña" class="form-label">Contraseña:</label>
                <div class="input-group">
                    <InputText id="contraseña"
                               type="@contraseñaTipo"
                               @bind-Value="loginModel.Contraseña"
                               class="@(contraseñaIncorrecta ? "form-control is-invalid" : "form-control")" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <i class="bi @iconoOjo"></i>
                    </button>
                </div>
            </div>

            <!-- Botón Ingresar -->
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Ingresar</button>
            </div>
        </EditForm>

        <!-- Registro -->
        <div class="text-center mt-3">
            <span>¿No tienes cuenta? </span>
            <a href="register" class="text-primary" style="cursor: pointer;">Regístrate aquí</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string contraseñaTipo = "password"; 
    private string iconoOjo = "bi-eye-slash";  
    private bool correoIncorrecto = false;     
    private bool contraseñaIncorrecta = false; 

    private async Task HandleLogin()
    {
        correoIncorrecto = false;
        contraseñaIncorrecta = false;

        var isAuthenticated = await AuthService.LoginAsync(loginModel.Correo, loginModel.Contraseña);

        if (isAuthenticated)
        {
            Navigation.NavigateTo("/home");
        }
        else
        {
            correoIncorrecto = true; 
            contraseñaIncorrecta = true; 
        }

        StateHasChanged(); 
    }

    private void TogglePasswordVisibility()
    {
        if (contraseñaTipo == "password")
        {
            contraseñaTipo = "text";  
            iconoOjo = "bi-eye";    
        }
        else
        {
            contraseñaTipo = "password";  
            iconoOjo = "bi-eye-slash";   
        }

        StateHasChanged(); 
    }

    public class LoginModel
    {
        public string Correo { get; set; }
        public string Contraseña { get; set; }
    }
}
