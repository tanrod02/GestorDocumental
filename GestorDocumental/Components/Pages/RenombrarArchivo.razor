@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject DialogService DialogService
@rendermode InteractiveServer

<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">
    <div style="display: flex; flex-direction: column; gap: 15px;">
        <!-- Mostrar el nombre del archivo actual -->
        <div>
            <label><b>Nombre del documento:</b></label>
            <p>@archivoActual.NombreArchivo</p>
        </div>

        <!-- Campo para el nuevo nombre de archivo -->
        <div>
            <label><b>Nuevo nombre de archivo:</b></label>
            <RadzenTextBox @bind-Value="archivoActual.NombreArchivo" Style="width: 100%;" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: red;">@errorMessage</div>
        }

        <!-- Botones de acción -->
        <div class="botones" style="display: flex; justify-content: space-between;">
            <RadzenButton Text="Modificar"
            ButtonStyle="ButtonStyle.Primary"
            Click="ModificarNombreArchivo" />

            <RadzenButton Text="Cancelar"
            ButtonStyle="ButtonStyle.Secondary"
            Click="Cancelar" />
        </div>
    </div>
</RadzenCard>

@code {

    [Parameter] public int CodigoArchivo { get; set; }

    private Archivo archivoActual = new Archivo();

    private string nombreAnterior = "";
    private string errorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        await CargarArchivo();
    }

    private async Task CargarArchivo()
    {
        try
        {
            if (CodigoArchivo != 0)
            {
                archivoActual = await ArchivoService.ObtenerInfoArchivo(CodigoArchivo);
                nombreAnterior = archivoActual.NombreArchivo;
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en ObtenerInfoArchivo: {e.Message}");
        }
    }

    private async void ModificarNombreArchivo()
    {
        if(nombreAnterior.Equals(archivoActual.NombreArchivo)){
            errorMessage = "El nuevo nombre debe ser diferente al anterior.";
        }else{

            var confirmacion = await DialogService.Confirm("¿Quiere renombrar el documento?", "Confirmar renombrar documento",
              new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });

            if (confirmacion == true)
            {
                await ArchivoService.ModificarArchivo(archivoActual);
            }

            DialogService.Close(true);
        }

    }

    private void Cancelar()
    {
        DialogService.Close(false);
    }
}
