@page "/home"
@page "/home/{CodigoCurso:int}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Components.Layout
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject AuthService AuthenticationService
@inject ICursoService CursoService
@inject Radzen.DialogService DialogService
@inject IEstadisticaService EstadisticaService
@inject ICarpetaService CarpetaService
@inject IEtiquetasService EtiquetasService


<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'; width: 100%; height: 100%;">
    <RadzenHeader>
        <div class="header-container">
            <h1 class="header-title">Documentos</h1>
            <div class="header-menu">
                <RadzenProfileMenu>
                    <Template>
                        @if (usuarioActual != null)
                        {
                            <span>Bienvenido, @usuarioActual.Nombre</span>
                        }
                    </Template>
                    <ChildContent>
                        <RadzenProfileMenuItem Text="Cerrar sesión" Path="" Icon="exit_to_app" @onclick="CerrarSesion"></RadzenProfileMenuItem>
                    </ChildContent>
                </RadzenProfileMenu>

            </div>
        </div>
    </RadzenHeader>

    @if(CodigoCurso != 0){
        <RadzenSidebar @bind-Expanded="@sidebarExpanded" Style="height: 100vh;">
            <NavBusquedaFiltros IsExpanded="@sidebarExpanded" IsExpandedChanged="@((value) => sidebarExpanded = value)" />
        </RadzenSidebar>
    }

    <RadzenBody Style="height: 100vh; overflow: auto;">
        <div style="width: 100%; height: 100%;" @oncontextmenu="args => ShowContextMenuWithItems(args)">
            <PageTitle>Documentos</PageTitle>

            @if (CodigoCurso != 0)
            {
                <button class="boton-flotante" type="button" @onclick="AbrirModalSubida">
                    📤 Subir Documento
                </button>
            }

            <div class="curso-toggle-container">

                @if (CodigoCurso != 0)
                {
                    <span class="curso-nombre">Curso @cursoActual.Descripcion</span>
                    <button class="toggle-view-button" @onclick="VerNoVisibles">
                        📄 Ver archivos no visibles
                    </button>



                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" class="rz-m-0" Style="margin-left: 1rem;" />
                }


            </div>


            @if (CodigoCurso == 0)
            {
                <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
            }
            else if (carpetas == null || archivos == null)
            {
                <p>Cargando archivos y carpetas...</p>
            }
            else if (elementos == null || !elementos.Any())
            {
                <p>Este curso todavía no tiene documentos ni carpetas.</p>
            }
            else
            {
                <RadzenStack Gap="1rem" class="rz-p-sm-12 documentos-container">
                    <div style="width: 100%; height: 100%;">

                        <div class="tarjetas-container" style="display: flex; flex-wrap: wrap; justify-content: flex-start;">
                            @foreach (var item in elementos)
                            {
                                @if (item is Carpeta carpeta)
                                {
                                    <RadzenCard class="rz-my-2 card-hover"
                                    Style="max-width: 420px; box-shadow: none; border: none; margin:0; padding: 0;"
                                    @onclick="() => MostrarArchivosDeCarpeta(carpeta)"
                                    @oncontextmenu="args => { ShowContextMenuCarpeta(args, carpeta); }">
                                        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4">
                                            <RadzenImage Path="@ObtenerIconoCarpeta()" Style="width: 50px; height: 50px;" />
                                            <RadzenText TextStyle="TextStyle.Body1">
                                                <a href="javascript:void(0);" @onclick="() => MostrarArchivosDeCarpeta(carpeta)"
                                                style="color: black; text-decoration: none; font-weight: bold;">
                                                    @carpeta.Descripcion
                                                </a>
                                            </RadzenText>
                                        </RadzenStack>
                                    </RadzenCard>
                                }
                                else if (item is Archivo archivo && (archivo.Visible || mostrarNoVisibles))
                                {
                                    <RadzenCard class="rz-my-2 card-hover"
                                    Style="max-width: 420px; box-shadow: none; border: none; margin:0; padding: 0;"
                                    @ondblclick="() => VerContenidoArchivo(archivo)"
                                    @oncontextmenu="args => { ShowContextMenu(args, archivo); }">
                                        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4">
                                            <RadzenImage Path="@ObtenerIconoArchivo(archivo.Tipo)" Style="width: 50px; height: 50px;" />
                                            <RadzenText TextStyle="TextStyle.Body1">
                                                <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)" 
                                                style="color: black; text-decoration: none; font-weight: bold;">
                                                    @archivo.NombreArchivo
                                                </a>
                                            </RadzenText>
                                            @if (!archivo.Visible)
                                            {
                                                <RadzenText TextStyle="TextStyle.Body2" Color="Color.Danger">
                                                    (No visible)
                                                </RadzenText>
                                            }
                                        </RadzenStack>
                                    </RadzenCard>
                                }
                            }
                        </div>

                    </div>
                </RadzenStack>

            }


        </div>

    </RadzenBody>
</RadzenLayout>




@code {
    [Parameter] public int CodigoCurso { get; set; }
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private IEnumerable<Carpeta> carpetas = new List<Carpeta>();
    private List<object> elementos;
    private Usuario usuarioActual = new Usuario();
    private Curso cursoActual = new Curso();

    private bool modalAbierto = false;
    private bool mostrandoArchivosDeCarpeta = false;
    private string carpetaSeleccionada = string.Empty;
    private bool modalAbiertoFecha = false;
    private bool modalAbiertoRenombrar = false;
    private bool modalAbiertoEstadisticas = false;
    private bool modalAbiertoCarpetaNueva = false;
    private bool modalAbiertoEtiquetas = false;
    private bool modalAbiertoRenombrarCarpeta = false;

    private bool clickArchivo = false;
    private bool mostrarNoVisibles = false;

    bool sidebarExpanded = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        await CargarCurso();
        await CargarArchivos();
    }

    private async Task CargarCurso()
    {
        try
        {
            if (CodigoCurso != 0)
            {
                cursoActual = await CursoService.ObtenerCursoPorCodigoAsync(CodigoCurso);
            }
            else
            {
                cursoActual = new Curso();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarCurso: {e.Message}");
        }
    }

    private async Task CargarArchivos()
    {
        try
        {
            var (carpetas, archivos) = await ArchivoService.ObtenerArchivosYCarpetasPorCursoAsync(CodigoCurso);
            elementos = new List<object>();
            elementos.AddRange(carpetas.ToList());
            elementos.AddRange(archivos.ToList());

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }


    private void VerNoVisibles()
    {
        mostrarNoVisibles = !mostrarNoVisibles;
    }

    async Task VerContenidoArchivo(Archivo archivo)
    {
        if (archivo.Tipo == "application/pdf" && archivo.Contenido?.Length > 0)
        {
            var base64 = Convert.ToBase64String(archivo.Contenido);
            await JSRuntime.InvokeVoidAsync("abrirPdf", base64);

            EstadisticaService.ActualizarEstadisticasArchivo(archivo).Wait();
        }
    }


    private void MostrarArchivosDeCarpeta(Carpeta carpeta)
    {
        Navigation.NavigateTo($"/MostrarCarpeta/{carpeta.CodigoCarpeta}/{usuarioActual.CodigoUsuario}/{cursoActual.Descripcion}");
        StateHasChanged();
    }



    async Task AbrirModalSubida()
    {
        if (modalAbierto) return;
        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<SubirArchivo>("Subir Archivo", new Dictionary<string, object>
        {
            { "CodigoCurso", CodigoCurso },
            { "CodigoUsuario", usuarioActual.CodigoUsuario }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbierto = false;
        if (resultado is bool archivoSubido && archivoSubido) await CargarArchivos();

        StateHasChanged();
    }

    async Task AbrirModalSubidaCarpeta(int opcion)
    {
        bool resultado = false;
        //crear carpeta
        if (opcion == 1)
        {
            if (modalAbiertoCarpetaNueva) return;
            modalAbiertoCarpetaNueva = true;
            var parameters = new Dictionary<string, object>()
            {
                { "CodigoCurso", CodigoCurso },
                { "CodigoUsuario", usuarioActual.CodigoUsuario },
                { "CodigoOpcion", opcion},
                { "DescripcionCurso", cursoActual.Descripcion}
            };
            resultado = await DialogService.OpenAsync<SubirCarpeta>(
                "Título del Modal",
                parameters,
                new DialogOptions { Width = "600px", Height = "auto" }
            );
            modalAbiertoCarpetaNueva = false;
        }
        else
        { //subir carpeta
            if (modalAbiertoCarpetaNueva) return;
            modalAbiertoCarpetaNueva = true;
            resultado = await DialogService.OpenAsync<SubirCarpeta>("Subir Carpeta", new Dictionary<string, object>
            {
                { "CodigoCurso", CodigoCurso },
                { "CodigoUsuario", usuarioActual.CodigoUsuario },
                { "CodigoOpcion", opcion}, 
                { "DescripcionCurso", cursoActual.Descripcion}
            }, new DialogOptions { Width = "600px", Height = "auto" });
            modalAbiertoCarpetaNueva = false;
        }

        if (resultado is bool archivoSubido && archivoSubido) await CargarArchivos();

        StateHasChanged();
    }

    private async Task CerrarSesion()
    {
        await AuthenticationService.Logout();
        Navigation.NavigateTo("/");
    }

    private string ObtenerIconoArchivo(string tipoArchivo)
    {
        return tipoArchivo switch
        {
            "application/pdf" => "icons/pdf.png"
        };

    }

    private string ObtenerIconoCarpeta()
    {
        return "icons/carpeta.png";
    }

    void ShowContextMenu(MouseEventArgs args, Archivo archivo)
    {

        clickArchivo = true;
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Ocultar/Mostrar", Value = "visibilidad", Icon = "visibility" },
                new ContextMenuItem(){ Text = "Estadísticas", Value = "estadisticas", Icon = "bar_chart" },
                new ContextMenuItem(){ Text = "Cambiar Fecha", Value = "cambiar_fecha", Icon = "event" },
                new ContextMenuItem(){ Text = "Etiquetas", Value = "etiquetas", Icon = "label" },
                new ContextMenuItem(){ Text = "Eliminar", Value = "eliminar", Icon = "delete" },
                new ContextMenuItem(){ Text = "Renombrar", Value = "renombrar", Icon = "edit" }
                            },
            item => OnMenuItemClick(item, archivo));

        Task.Delay(300).ContinueWith(_ => clickArchivo = false);
    }

    void OnMenuItemClick(MenuItemEventArgs args, Archivo archivo)
    {
        switch (args.Value)
        {
            case "visibilidad":
                CambiarVisibilidad(archivo);
                Console.WriteLine($"Ocultando/Mostrando archivo: {archivo.NombreArchivo}");
                break;
            case "estadisticas":
                MostrarEstadisticas(archivo);
                Console.WriteLine($"Mostrando estadísticas de: {archivo.NombreArchivo}");
                break;
            case "cambiar_fecha":
                CarmbiarFecha(archivo);
                Console.WriteLine($"Cambiando fecha de: {archivo.NombreArchivo}");
                break;
            case "etiquetas":
                ModificarEtiquetas(archivo);
                Console.WriteLine($"Gestionando etiquetas de: {archivo.NombreArchivo}");
                break;
            case "eliminar":
                EliminarArchivo(archivo);
                Console.WriteLine($"Eliminando archivo: {archivo.NombreArchivo}");
                break;
            case "renombrar":
                RenombrarArchivo(archivo);
                Console.WriteLine($"Renombrando archivo: {archivo.NombreArchivo}");
                break;
        }
        ContextMenuService.Close();
    }

    public async void CambiarVisibilidad(Archivo archivo)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres cambiar la visibilidad de este documento?", "Cambiar visibilidad",
          new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });

        if(confirmacion == true){
            if (archivo.Visible == true)
            {
                archivo.Visible = false;
            }
            else archivo.Visible = true;

            await ArchivoService.ModificarArchivo(archivo);
        }
       

        await CargarArchivos();
        StateHasChanged();
    }

    public async void MostrarEstadisticas(Archivo archivo)
    {
        if (modalAbiertoEstadisticas) return;
        modalAbiertoEstadisticas = true;
        var resultado = await DialogService.OpenAsync<MostrarEstadisticasArchivo>("Estadísticas", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo},
            { "NombreArchivo", archivo.NombreArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoEstadisticas = false;
    }

    public async void CarmbiarFecha(Archivo archivo)
    {
        if (modalAbiertoFecha) return;
        modalAbiertoFecha = true;
        var resultado = await DialogService.OpenAsync<ModificarFechaArchivo>("Modificar Fecha", new Dictionary<string, object>
        {
            { "CodigoUsuario", usuarioActual.CodigoUsuario },
            { "CodigoArchivo", archivo.CodigoArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoFecha = false;

    }

    public async void ModificarEtiquetas(Archivo archivo)
    {
        if (modalAbiertoEtiquetas) return;
        modalAbiertoEtiquetas = true;
        var resultado = await DialogService.OpenAsync<ModificarEtiquetas>("Modificar Etiquetas", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoEtiquetas = false;
    }

    public async Task EliminarArchivo(Archivo archivo)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres eliminar este archivo?", "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí, eliminar", CancelButtonText = "Cancelar" });

        if (confirmacion == true)
        {
            await EtiquetasService.EliminarTodasEtiquetasArchivo(archivo.CodigoArchivo);
            await ArchivoService.EliminarArchivo(archivo.CodigoArchivo);

        }

        await CargarArchivos();
        StateHasChanged();
    }


    public async void RenombrarArchivo(Archivo archivo)
    {
        if (modalAbiertoRenombrar) return;
        modalAbiertoRenombrar = true;
        var resultado = await DialogService.OpenAsync<RenombrarArchivo>("Renombrar Archivo", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoRenombrar = false;

        await CargarArchivos();
        StateHasChanged();
    }


    void ShowContextMenuWithItems(MouseEventArgs args)
    {
        if (clickArchivo) return;
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Subir Archivo", Value = 1, Icon = "upload" },
                new ContextMenuItem(){ Text = "Subir Carpeta", Value = 2, Icon = "create_new_folder"},
                new ContextMenuItem(){ Text = "Crear Carpeta", Value = 3, Icon = "create_new_folder" },
                 }, OnMenuItemClickGeneral);
    }

    void OnMenuItemClickGeneral(MenuItemEventArgs args)
    {
        switch (args.Value)
        {
            case 1:
                AbrirModalSubida();
                break;
            case 2:
                AbrirModalSubidaCarpeta(2);
                break;
            case 3:
                AbrirModalSubidaCarpeta(1);
                break;

        }
        ContextMenuService.Close();

        CargarArchivos();
        StateHasChanged();
    }

    void ShowContextMenuCarpeta(MouseEventArgs args, Carpeta carpeta)
    {

        clickArchivo = true;
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Eliminar", Value = "eliminar", Icon = "delete" },
                new ContextMenuItem(){ Text = "Renombrar", Value = "renombrar", Icon = "edit" }
                                    },
            item => OnMenuItemCarpetaClick(item, carpeta));

        Task.Delay(300).ContinueWith(_ => clickArchivo = false);
    }

    void OnMenuItemCarpetaClick(MenuItemEventArgs args, Carpeta carpeta)
    {
        switch (args.Value)
        {
            case "eliminar":
                EliminarCarpeta(carpeta);
                Console.WriteLine($"Eliminando archivo: {carpeta.Descripcion}");
                break;
            case "renombrar":
                RenombrarCarpeta(carpeta);
                Console.WriteLine($"Renombrando archivo: {carpeta.Descripcion}");
                break;
        }
        ContextMenuService.Close();
    }


    public async Task EliminarCarpeta(Carpeta carpeta)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres eliminar esta carpeta?", "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí, eliminar", CancelButtonText = "Cancelar" });

        if (confirmacion == true)
        {
            await CarpetaService.EliminarCarpeta(carpeta);

        }

        await CargarArchivos();
        StateHasChanged();
    }


    public async void RenombrarCarpeta(Carpeta carpeta)
    {
        if (modalAbiertoRenombrarCarpeta) return;
        modalAbiertoRenombrarCarpeta = true;
        var resultado = await DialogService.OpenAsync<RenombrarCarpeta>("Renombrar Carpeta", new Dictionary<string, object>
        {
            { "CodigoCarpeta", carpeta.CodigoCarpeta}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoRenombrarCarpeta = false;

        await CargarArchivos();
        StateHasChanged();
    }
}


