@page "/"
@page "/{CodigoCurso:int}"
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms

@inject IArchivoService ArchivoService

<PageTitle>Documentos</PageTitle>

<h1>Documentos</h1>

@if (archivos == null)
{
    <p>Cargando archivos...</p>
}
else if (!archivos.Any())
{
    <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Fecha Alta</th>
                <th>Etiquetas</th>
                <th>Visible</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var archivo in archivos)
            {
                <tr>
                    <td>@archivo.NombreArchivo</td>
                    <td>@archivo.Tipo</td>
                    <td>@archivo.FechaAlta.ToString("dd/MM/yyyy")</td>
                    <td>@archivo.Etiquetas</td>
                    <td>@(archivo.Visible ?? false ? "Sí" : "No")</td>
                </tr>
            }
        </tbody>
    </table>

    <button class="floating-button" type="button" @onclick="AbrirDialogoSubida">
        📤 Subir Documento
    </button>
}

@if (mostrarDialogo)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <h3>Seleccionar archivo</h3>

            <InputFile OnChange="OnFileSelected" />

            @if (_archivoSeleccionado != null)
            {
                <p>Archivo seleccionado: @_archivoSeleccionado.Name</p>
            }

            <div class="dialog-buttons">
                <button @onclick="OnAccept" disabled="@(_archivoSeleccionado == null)">Aceptar</button>
                <button @onclick="OnCancel">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int CodigoCurso { get; set; }
    private IEnumerable<Archivo> archivos = new List<Archivo>();

    private bool mostrarDialogo = false;
    private IBrowserFile? _archivoSeleccionado;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            archivos = await ArchivoService.ObtenerArchivosPorCursoAsync(CodigoCurso);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en OnParametersSetAsync: {e.Message}");
        }
    }

    void AbrirDialogoSubida()
    {
        try
        {
            mostrarDialogo = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en AbrirDialogoSubida: {ex.Message}");
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _archivoSeleccionado = e.File;
    }

    private async Task OnAccept()
    {
        if (_archivoSeleccionado != null)
        {
            using var stream = _archivoSeleccionado.OpenReadStream();
            Console.WriteLine($"Subiendo archivo: {_archivoSeleccionado.Name}");
            // Aquí iría la lógica para subir el archivo al servicio
        }
        CerrarDialogo();
    }

    private void OnCancel()
    {
        CerrarDialogo();
    }

    private void CerrarDialogo()
    {
        mostrarDialogo = false;
        _archivoSeleccionado = null;
    }
}