@page "/home"
@page "/home/{CodigoCurso:int}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Components.Layout
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<PageTitle>Documentos</PageTitle>

<h1>Documentos</h1>

@if (CodigoCurso == 0)
{
    <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
}
else if (archivos == null)
{
    <p>Cargando archivos...</p>
}
else if (!archivos.Any())
{
    <p>Este curso todavía no tiene documentos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Fecha Alta</th>
                <th>Etiquetas</th>
                <th>Visible</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var archivo in archivos)
            {
                <tr>
                    <td>
                        <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)">
                            @archivo.NombreArchivo
                        </a>
                    </td>
                    <td>@archivo.Tipo</td>
                    <td>@archivo.FechaAlta.ToString("dd/MM/yyyy")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(archivo.Etiquetas))
                        {
                            var etiquetas = archivo.Etiquetas.Split(';');
                            foreach (var etiqueta in etiquetas)
                            {
                                <span class="badge badge-primary" style="margin-right: 5px;">@etiqueta</span>
                            }
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </td>
                    <td>@(archivo.Visible ?? false ? "Sí" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (contenidoArchivo != null)
{
    <h3>Contenido del archivo: @contenidoArchivo.NombreArchivo</h3>
    <div>
        @if (contenidoArchivo.Tipo == "application/pdf" && contenidoArchivo.Contenido != null && contenidoArchivo.Contenido.Length > 0)
        {
            <embed src="data:application/pdf;base64,@Convert.ToBase64String(contenidoArchivo.Contenido)" width="100%" height="600px" type="application/pdf" />
        }
        else
        {
            <p>El contenido del archivo no puede mostrarse directamente.</p>
        }
    </div>
    <button class="btn btn-secondary" @onclick="LimpiarContenido">Cerrar</button>
}

@if (CodigoCurso != 0)
{
    <button class="floating-button" type="button" @onclick="AbrirModalSubida">
        📤 Subir Documento
    </button>
}


@code {
    [Parameter] public int CodigoCurso { get; set; }
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private Archivo contenidoArchivo;
    private bool modalAbierto = false;

    protected override async Task OnParametersSetAsync()
    {
        await CargarArchivos();
    }

    private async Task CargarArchivos()
    {
        try
        {
            if (CodigoCurso != 0)
            {
                archivos = await ArchivoService.ObtenerArchivosPorCursoAsync(CodigoCurso);
            }
            else
            {
                archivos = new List<Archivo>();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }

    async Task VerContenidoArchivo(Archivo archivo)
    {
        if (archivo.Tipo == "application/pdf" && archivo.Contenido != null && archivo.Contenido.Length > 0)
        {
            contenidoArchivo = archivo;
            StateHasChanged();
        }
        else
        {
            contenidoArchivo = null;
            StateHasChanged();
        }
    }

    void LimpiarContenido()
    {
        contenidoArchivo = null;
        StateHasChanged();
    }

    async Task AbrirModalSubida()
    {
        if (modalAbierto) return;

        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<SubirArchivo>("Subir Archivo", new Dictionary<string, object>
        {
            { "CodigoCurso", CodigoCurso }
        }, new DialogOptions { Width = "600px", Height = "auto" });

        modalAbierto = false;

        if (resultado is bool archivoSubido && archivoSubido)
        {
            await CargarArchivos(); // Recargar lista después de subir un archivo
        }
    }
}



@* @page "/home"
@page "/home/{CodigoCurso:int}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Components.Layout
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Documentos</PageTitle>

<h1>Documentos</h1>

@if (CodigoCurso == 0)
{
    <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
}
else if (archivos == null)
{
    <p>Cargando archivos...</p>
}
else if (!archivos.Any())
{
    <p>Este curso todavía no tiene documentos.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Fecha Alta</th>
                <th>Etiquetas</th>
                <th>Visible</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var archivo in archivos)
            {
                <tr>
                    <td>
                        <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)">
                            @archivo.NombreArchivo
                        </a>
                    </td>
                    <td>@archivo.Tipo</td>
                    <td>@archivo.FechaAlta.ToString("dd/MM/yyyy")</td>
                    <td>@archivo.Etiquetas</td>
                    <td>@(archivo.Visible ?? false ? "Sí" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (contenidoArchivo != null)
{
    <h3>Contenido del archivo: @contenidoArchivo.NombreArchivo</h3>
    <div>
        @if (contenidoArchivo.Tipo == "application/pdf" && contenidoArchivo.Contenido != null && contenidoArchivo.Contenido.Length > 0)
        {
            <!-- Mostrar el PDF -->
            <embed src="data:application/pdf;base64,@Convert.ToBase64String(contenidoArchivo.Contenido)" width="100%" height="600px" type="application/pdf" />
        }
        else
        {
            <p>El contenido del archivo no puede mostrarse directamente.</p>
        }
    </div>
    <button class="btn btn-secondary" @onclick="LimpiarContenido">Cerrar</button>
}

@if (CodigoCurso != 0)
{
    <button class="floating-button" type="button" @onclick="AbrirVentanaSubida">
        📤 Subir Documento
    </button>
}


@code {
    [Parameter] public int CodigoCurso { get; set; }
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private Archivo contenidoArchivo;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (CodigoCurso != 0)
            {
                archivos = await ArchivoService.ObtenerArchivosPorCursoAsync(CodigoCurso);
            }
            else
            {
                archivos = new List<Archivo>();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en OnParametersSetAsync: {e.Message}");
        }
    }

    async Task VerContenidoArchivo(Archivo archivo)
    {
        // Asegurarse de que el archivo tiene contenido y es un PDF
        if (archivo.Tipo == "application/pdf" && archivo.Contenido != null && archivo.Contenido.Length > 0)
        {
            contenidoArchivo = archivo;
            StateHasChanged();
        }
        else
        {
            contenidoArchivo = null;
            StateHasChanged();
        }
    }

    void LimpiarContenido()
    {
        // Limpiar el contenido mostrado
        contenidoArchivo = null;
        StateHasChanged();
    }

    async Task AbrirVentanaSubida()
    {
        var url = $"/subir-archivo/{CodigoCurso}";
        await JSRuntime.InvokeVoidAsync("abrirVentanaSubida", url);
    }
}
 *@