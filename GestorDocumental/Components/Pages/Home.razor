





@page "/home"
@page "/home/{CodigoCurso:int}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Components.Layout
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject AuthService AuthenticationService
@inject ICursoService CursoService

<PageTitle>Documentos</PageTitle>

<!-- Contenedor del encabezado -->
<div class="header-container">
    <h1 class="header-title">Documentos</h1>
    <div class="header-menu">
        <RadzenProfileMenu>
            <Template>
                @if (usuarioActual != null)
                {
                    <span>Bienvenido, @usuarioActual.Nombre</span>
                }
            </Template>
            <ChildContent>
                <RadzenProfileMenuItem Text="Cerrar sesión" Path="" Icon="exit_to_app" @onclick="CerrarSesion"></RadzenProfileMenuItem>
            </ChildContent>
        </RadzenProfileMenu>
    </div>
</div>


@if(CodigoCurso != 0){

    <div class="curso-toggle-container">
        <span class="curso-nombre"> @(CodigoCurso != 0 ? "Curso " + cursoActual.Descripcion : "Ninguno seleccionado")</span>
        <button class="toggle-view-button" @onclick="ToggleVista">
            @(modoTarjetas ? "📄 Ver en Lista" : "🗂️ Ver en Iconos Grandes")
        </button>
    </div>
}

@if (CodigoCurso == 0)
{
    <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
}
else if (archivos == null)
{
    <p>Cargando archivos...</p>
}
else if (!archivos.Any())
{
    <p>Este curso todavía no tiene documentos.</p>
}
else
{
    @if (modoTarjetas)
    {
        <div class="tarjetas-container">
            @foreach (var archivo in archivos)
            {
                <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 420px" @ondblclick="() => VerContenidoArchivo(archivo)">
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4">
                        <RadzenImage Path="@ObtenerIconoArchivo(archivo.Tipo)" Style="width: 50px; height: 50px;" />
                        <RadzenText TextStyle="TextStyle.Body1">
                            <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)"><b>@archivo.NombreArchivo</b></a>
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            }
        </div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Tipo</th>
                    <th>Fecha Alta</th>
                    <th>Etiquetas</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var archivo in archivos)
                {
                    <tr>
                        <td>
                            <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)">
                                @archivo.NombreArchivo
                            </a>
                        </td>
                        <td>@archivo.Tipo</td>
                        <td>@archivo.FechaAlta.ToString("dd/MM/yyyy")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(archivo.Etiquetas))
                            {
                                var etiquetas = archivo.Etiquetas.Split(';');
                                <p>@string.Join(", ", etiquetas)</p>  
                                @foreach (var etiqueta in etiquetas)
                                {
                                    <span class="badge badge-primary" style="margin-right: 5px;">@etiqueta.Trim()</span>
                                }
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </td>

                    </tr>
                }
            </tbody>
        </table>
      

    }
}

@if (CodigoCurso != 0)
{
    <button class="floating-button" type="button" @onclick="AbrirModalSubida">
        📤 Subir Documento
    </button>



}

@code {
    [Parameter] public int CodigoCurso { get; set; }
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private Usuario usuarioActual = new Usuario();
    private Curso cursoActual = new Curso();

    private bool modoTarjetas = false;
    private bool modalAbierto = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();
            StateHasChanged();
        }
        await CargarArchivos();
    }

    protected override async Task OnParametersSetAsync()
    {

        await CargarCurso();
        await CargarArchivos();
    }

    private async Task CargarCurso()
    {
        try
        {
            if (CodigoCurso != 0)
            {
                cursoActual = await CursoService.ObtenerCursoPorCodigoAsync(CodigoCurso);
            }
            else
            {
                cursoActual = new Curso(); // Si no hay curso seleccionado, evita errores
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarCurso: {e.Message}");
        }
    }

    private async Task CargarArchivos()
    {
        try
        {
            archivos = CodigoCurso != 0 ? await ArchivoService.ObtenerArchivosPorCursoAsync(CodigoCurso) : new List<Archivo>();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }

    private void ToggleVista()
    {
        modoTarjetas = !modoTarjetas;
    }

    async Task VerContenidoArchivo(Archivo archivo)
    {
        if (archivo.Tipo == "application/pdf" && archivo.Contenido?.Length > 0)
        {
            var base64 = Convert.ToBase64String(archivo.Contenido);
            await JSRuntime.InvokeVoidAsync("abrirPdfDesdeBytes", base64);
        }
    }

    async Task AbrirModalSubida()
    {
        if (modalAbierto) return;
        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<SubirArchivo>("Subir Archivo", new Dictionary<string, object>
        {
            { "CodigoCurso", CodigoCurso },
            { "CodigoUsuario", usuarioActual.CodigoUsuario }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbierto = false;
        if (resultado is bool archivoSubido && archivoSubido) await CargarArchivos();
    }

    private async Task CerrarSesion()
    {
        await AuthenticationService.Logout();
        Navigation.NavigateTo("/");
    }

    private string ObtenerIconoArchivo(string tipoArchivo)
    {
        return tipoArchivo switch
        {
            "application/pdf" => "icons/pdf.png"
        };
    }
}

