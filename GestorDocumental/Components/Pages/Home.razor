@page "/home"
@page "/home/{CodigoCurso:int}"
@page "/home/{CodigoCurso:int}/{CodigoCarpeta:int}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Components.Layout
@using GestorDocumental.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject AuthService AuthenticationService
@inject ICursoService CursoService
@inject Radzen.DialogService DialogService
@inject IEstadisticaService EstadisticaService
@inject ICarpetaService CarpetaService
@inject IEstadisticaService EstadisticasService
@inject IEtiquetasService EtiquetasService

<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'; width: 100%; height: 100%;">
    <RadzenHeader>
        <div class="header-container">
            <h1 class="header-title">Documentos</h1>
            <div class="header-menu">
                <RadzenProfileMenu>
                    <Template>
                        @if (usuarioActual != null)
                        {
                            <span>Bienvenido, @usuarioActual.Nombre</span>
                        }
                    </Template>
                    <ChildContent>
                        <RadzenProfileMenuItem Text="Cerrar sesión" Path="" Icon="exit_to_app" @onclick="CerrarSesion" />
                    </ChildContent>
                </RadzenProfileMenu>
            </div>
        </div>
    </RadzenHeader>

    @if (CodigoCurso != 0 && sidebarExpanded)
    {
        <RadzenSidebar Expanded="@sidebarExpanded" Style="height: 100vh;">
            <NavBusquedaFiltros CodigoCurso="@CodigoCurso" CodigoCarpeta="@CodigoCarpeta" />
        </RadzenSidebar>
    }

    <RadzenBody Style="height: 100vh; overflow: auto; background-color: white">
        <div style="width: 100%; height: 100%;" @oncontextmenu="args => ShowContextMenuWithItems(args)">
            <PageTitle>Documentos</PageTitle>
            <div class="curso-toggle-container">
                @if (CodigoCurso != 0)
                {

                    if (CodigoCarpeta == 0)
                    {
                        @if (!string.IsNullOrEmpty(GrupoFiltro))
                        {
                            <span class="curso-nombre">Curso @cursoActual.Descripcion - Grupo @GrupoFiltro</span>
                        }else{
                            <span class="curso-nombre">Curso @cursoActual.Descripcion</span>
                        }

                    }
                    else
                    {
                        <button class="back-button" @onclick="VolverHome" style="border: none; background: transparent; cursor: pointer; display: inline-flex; align-items: center; margin-right: 5px;">
                            <span style="font-size: 1.5rem; color: #007bff;">←</span>
                        </button>
                        @if (!string.IsNullOrEmpty(GrupoFiltro))
                        {
                            <span class="curso-nombre" style="display: inline; margin: 0; padding: 0;">@cursoActual.Descripcion - Grupo @GrupoFiltro/@carpetaActual.Descripcion</span>
                        }
                        else
                        {
                            <span class="curso-nombre" style="display: inline; margin: 0; padding: 0;">@cursoActual.Descripcion/@carpetaActual.Descripcion</span>
                        }

                    }

                    <div class="curso-toggle-buttons">
                        @if (usuarioActual.CodigoRol != rolUser){

                            <button class="toggle-view-button" @onclick="VerNoVisibles">
                                📄 Ver documentos no visibles
                            </button>
                        }
                        <button class="toggle-view-button" @onclick="ToggleVista">
                            @(modoTarjetas ? "📄 Ver en Lista" : "🗂️ Ver en Iconos Grandes")
                        </button>
                        <RadzenSidebarToggle class="sidebar-toggle-btn" Click="@ToggleSidebar" />
                    </div>
                }
            </div>

            <div class="filters-message">
                @if (!string.IsNullOrWhiteSpace(keyword))
                {
                    <p><strong>Resultados para:</strong> "@keyword"</p>
                }
                @if (etiquetasFiltro.Any() || recientes || masVistos)
                {
                    var mensajes = new List<string>();
                    if (etiquetasFiltro.Any())
                    {
                        List<string> etiquetasSeleccionadas = TodasEtiquetas
                        .Where(e => etiquetasFiltro.Contains(e.CodigoEtiqueta))
                        .Select(e => e.DescripcionEtiqueta)
                        .ToList();
                        mensajes.Add($"Documentos con etiquetas: {string.Join(", ", etiquetasSeleccionadas)}");
                    }
                    if (recientes)
                    {
                        mensajes.Add("Ordenado por: Más recientes");
                    }
                    if (masVistos)
                    {
                        mensajes.Add("Ordenado por: Más vistos");
                    }
                    if (mensajes.Any())
                    {
                        foreach (var mensaje in mensajes)
                        {
                            <p>@mensaje</p>
                        }
                    }
                }
            </div>

            @if (CodigoCurso == 0)
            {
                <p>Bienvenido. Selecciona el curso para ver los documentos.</p>
            }
            else if (carpetas == null || archivos == null)
            {
                <p>Cargando archivos y carpetas...</p>
            }
            else if (elementos == null || !elementos.Any())
            {
                if (CodigoCarpeta > 0)
                {
                    <p>Carpeta vacía.</p>
                }
                else
                {
                    <p>No se encontraron documentos que cumplan con los criterios de búsqueda.</p>
                }
            }
            else
            {
                @if (modoTarjetas)
                {
                    <!-- Vista en tarjetas -->
                    <RadzenStack Gap="1rem" class="rz-p-sm-12 documentos-container">
                        <div style="width: 100%; height: 100%;">
                            <div class="tarjetas-container" style="display: flex; flex-wrap: wrap; justify-content: flex-start;">
                                @foreach (var item in elementos)
                                {
                                    if (item is Carpeta carpeta)
                                    {
                                        <RadzenCard class="rz-my-2 card-hover"
                                        Style="max-width: 420px; box-shadow: none; border: none; margin:0; padding: 0;"
                                        draggable="true"
                                        @onclick="() => MostrarArchivosDeCarpeta(carpeta)"
                                        @oncontextmenu="args => { ShowContextMenuCarpeta(args, carpeta); }"
                                        @attributes="@(new Dictionary<string, object>() {
                                                        { "data-carpeta-id", carpeta.CodigoCarpeta },
                                                        { "ondragover", "onDragOver(event)" },
                                                        { "ondrop", "onDrop(event)" }
                                                    })">
                                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4">
                                                <RadzenImage Path="@ObtenerIconoCarpeta()" Style="width: 50px; height: 50px;" />
                                                <RadzenText TextStyle="TextStyle.Body1">
                                                    <a href="javascript:void(0);" @onclick="() => MostrarArchivosDeCarpeta(carpeta)"
                                                    style="color: black; text-decoration: none; font-weight: bold;">
                                                        @carpeta.Descripcion
                                                    </a>
                                                </RadzenText>
                                            </RadzenStack>
                                        </RadzenCard>
                                    }
                                    else if (item is Archivo archivo && (archivo.Visible || mostrarNoVisibles))
                                    {
                                        <RadzenCard class="rz-my-2 card-hover"
                                        Style="max-width: 420px; box-shadow: none; border: none; margin:0; padding: 0;"
                                        draggable="true"
                                        @ondblclick="() => VerContenidoArchivo(archivo)"
                                        @oncontextmenu="args => { ShowContextMenu(args, archivo); }"
                                        data-archivo-id="@archivo.CodigoArchivo"
                                        @attributes="@(new Dictionary<string, object>() {
                                                        { "ondragstart", "onDragStart(event)" }
                                                    })">
                                            <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4"
                                            data-archivo-id="@archivo.CodigoArchivo">
                                                <RadzenImage Path="@ObtenerIconoArchivo(archivo.Tipo)" Style="width: 50px; height: 50px;"
                                                data-archivo-id="@archivo.CodigoArchivo" />
                                                <RadzenText TextStyle="TextStyle.Body1" data-archivo-id="@archivo.CodigoArchivo">
                                                    <a href="javascript:void(0);" @onclick="() => VerContenidoArchivo(archivo)"
                                                    style="color: black; text-decoration: none; font-weight: bold;">
                                                        @archivo.NombreArchivo
                                                    </a>
                                                </RadzenText>
                                                @if (!archivo.Visible)
                                                {
                                                    <RadzenText TextStyle="TextStyle.Body2" Color="Color.Danger">
                                                        (No visible)
                                                    </RadzenText>
                                                }
                                            </RadzenStack>
                                        </RadzenCard>
                                    }
                                }
                            </div>
                        </div>
                    </RadzenStack>
                }
                else
                {
                    <!-- Vista en lista -->
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width: 5%;">Tipo</th>
                                <th>Nombre</th>
                                <th style="width: 10%;">Tamaño</th>
                                <th style="width: 10%;">Fecha Alta</th>
                                <th style="width: 10%;">Fecha Baja</th>
                                <th style="width: 10%;">Visible</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in elementos)
                            {
                                if (item is Carpeta carpeta)
                                {
                                    <tr @onclick="() => MostrarArchivosDeCarpeta(carpeta)" style="cursor:pointer;"
                                    @oncontextmenu="args => { ShowContextMenuCarpeta(args, carpeta); }">
                                        <td>
                                            <img src="@ObtenerIconoCarpeta()" alt="Carpeta" style="width:20px; height:20px;" />
                                        </td>
                                        <td>@carpeta.Descripcion</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                }
                                else if (item is Archivo archivo && (archivo.Visible || mostrarNoVisibles))
                                {
                                    <tr @ondblclick="() => VerContenidoArchivo(archivo)" @oncontextmenu="args => { ShowContextMenu(args, archivo); }" style="cursor:pointer;">
                                        <td>
                                            <img src="@ObtenerIconoArchivo(archivo.Tipo)" alt="Archivo" style="width:20px; height:20px;" />
                                        </td>
                                        <td>@archivo.NombreArchivo</td>
                                        <td>@archivo.Tamaño KB</td>
                                        <td>@archivo.FechaAlta.ToString("dd/MM/yyyy")</td>
                                        <td>@archivo.FechaBaja?.ToString("dd/MM/yyyy")</td>
                                        <td>@(archivo.Visible ? "Si" : "No")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
            }

            @if (CodigoCurso != 0 && usuarioActual.CodigoRol != rolUser)
            {
                <button class="boton-flotante" type="button" @onclick="AbrirModalSubida">
                    📤 Subir Documento
                </button>
            }
        </div>
    </RadzenBody>
</RadzenLayout>

@code {
    [Parameter]
    public int CodigoCurso { get; set; }
    [Parameter]
    public int CodigoCarpeta { get; set; }

    // Recibir el parámetro "grupo" desde la query string.
    [Parameter, SupplyParameterFromQuery(Name = "grupo")]
    public string GrupoFiltro { get; set; } = string.Empty;

    // Resto de las variables y métodos...
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private IEnumerable<Carpeta> carpetas = new List<Carpeta>();
    private Carpeta carpetaActual = new Carpeta();
    private List<Archivo> archivosCarpeta = new List<Archivo>();
    private List<object> elementos = new List<object>();
    private Usuario usuarioActual = new Usuario();
    private Curso cursoActual = new Curso();
    private List<EstadisticasArchivo> estadisticas = new List<EstadisticasArchivo>();
    private List<int> etiquetasFiltro = new List<int>();
    private List<ArchivoEtiqueta> etiquetasArchivos = new List<ArchivoEtiqueta>();
    private List<Etiqueta> TodasEtiquetas = new List<Etiqueta>();

    private bool modoTarjetas = true;
    private bool mostrarCarpeta => CodigoCarpeta > 0;
    private bool modalAbierto = false;
    private bool mostrandoArchivosDeCarpeta = false;
    private bool modalAbiertoFecha = false;
    private bool modalAbiertoRenombrar = false;
    private bool modalAbiertoEstadisticas = false;
    private bool modalAbiertoCarpetaNueva = false;
    private bool modalAbiertoEtiquetas = false;
    private bool modalAbiertoRenombrarCarpeta = false;
    private bool clickArchivo = false;
    private bool mostrarNoVisibles = false;

    bool sidebarExpanded = false;
    private string keyword = "";
    private bool masVistos = false;
    private bool recientes = false;

    private string grupoFiltro = string.Empty;

    private const int rolUser = 3;

    private DotNetObjectReference<Home>? dotNetRef;

    private System.Diagnostics.Stopwatch _stopwatch = new System.Diagnostics.Stopwatch();
    private int? codArchivoActual;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registrarObjetoDotNet", dotNetRef);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        try{
            await CargarCurso();

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            await CargarArchivos();

            if (query.ContainsKey("keyword"))
            {
                var searchTerm = query["keyword"].FirstOrDefault();
                if (!string.IsNullOrWhiteSpace(searchTerm) && elementos != null)
                {
                    keyword = searchTerm;
                    elementos = elementos.Where(item =>
                    {
                        if (item is Archivo a)
                            return a.NombreArchivo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
                        else if (item is Carpeta c)
                            return c.Descripcion.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
                        return false;
                    }).ToList();
                }
            }
            else
            {
                if (query.TryGetValue("recientes", out var rec))
                {
                    bool.TryParse(rec.FirstOrDefault(), out recientes);
                }
                if (query.TryGetValue("masVistos", out var mv))
                {
                    bool.TryParse(mv.FirstOrDefault(), out masVistos);
                }
                if (recientes || masVistos)
                {
                    if (elementos != null)
                    {
                        if (recientes)
                        {
                            elementos = elementos.OrderByDescending(item =>
                            {
                                if (item is Archivo a)
                                    return a.FechaAlta;
                                return DateTime.MinValue;
                            }).ToList();
                        }
                        if (masVistos)
                        {
                            var estadisticasDic = estadisticas.ToDictionary(e => e.CodigoArchivo, e => e.NumeroVisitas);
                            elementos = elementos.OrderByDescending(item =>
                            {
                                if (item is Archivo a && estadisticasDic.TryGetValue(a.CodigoArchivo, out var visitas))
                                    return visitas;
                                return 0;
                            }).ToList();
                        }
                    }
                }
                if (query.TryGetValue("tags", out var tagsRaw) && !String.IsNullOrEmpty(tagsRaw))
                {
                    etiquetasFiltro = tagsRaw.ToString()
                        .Split(",", StringSplitOptions.RemoveEmptyEntries)
                        .Select(int.Parse)
                        .ToList();
                }
                if (etiquetasFiltro.Any())
                {
                    var codigosArchivosFiltrados = etiquetasArchivos.Where(rel => etiquetasFiltro.Contains(rel.CodigoEtiqueta))
                            .Select(rel => rel.CodigoArchivo).Distinct().ToHashSet();

                    elementos = elementos.Where(item =>
                    {
                        if (item is Archivo a)
                            return codigosArchivosFiltrados.Contains(a.CodigoArchivo);
                        return true;
                    }).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }

    }

    private async Task CargarCurso()
    {
        try
        {
            if (CodigoCurso != 0)
            {

                cursoActual = await CursoService.ObtenerCursoPorCodigoAsync(CodigoCurso);
            }
            else
            {
                cursoActual = new Curso();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarCurso: {e.Message}");
        }
    }

    private async Task CargarArchivos()
    {
        try
        {
            elementos.Clear();

            if (CodigoCarpeta == 0)
            {
                if (!string.IsNullOrWhiteSpace(GrupoFiltro))
                {
                    var (carpetasData, archivosData) = await ArchivoService.ObtenerArchivosYCarpetasPorCursoYGrupoAsync(CodigoCurso, GrupoFiltro);
                    carpetas = carpetasData;
                    archivos = archivosData;
                }
                else
                {
                    var (carpetasData, archivosData) = await ArchivoService.ObtenerArchivosYCarpetasPorCursoAsync(CodigoCurso);
                    carpetas = carpetasData;
                    archivos = archivosData;
                }
                elementos.AddRange(carpetas.ToList());
                elementos.AddRange(archivos.ToList());
            }
            else
            {
                carpetaActual = await CarpetaService.ObtenerCarpeta(CodigoCarpeta);
                archivosCarpeta = await CarpetaService.ObtenerArchivosCarpeta(CodigoCarpeta);
                if (archivosCarpeta.Any())
                {
                    elementos.AddRange(archivosCarpeta);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }

    private async Task CargarEstadisticas(List<Archivo> archivos)
    {
        try
        {
            estadisticas = await EstadisticasService.ObtenerEstadisticas(archivos);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }

    private async Task CargarEtiquetas(List<Archivo> archivos)
    {
        try
        {
            etiquetasArchivos = await EtiquetasService.ObtenerRelacionesEtiquetasArchivos(archivos);
            TodasEtiquetas = await EtiquetasService.ObtenerEtiquetas();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarArchivos: {e.Message}");
        }
    }

    private void VolverHome()
    {
        Navigation.NavigateTo($"/home/{carpetaActual.Curso}");
    }

    private void ToggleSidebar()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    private void ToggleVista() => modoTarjetas = !modoTarjetas;
    private void VerNoVisibles() => mostrarNoVisibles = !mostrarNoVisibles;

    async Task VerContenidoArchivo(Archivo archivo)
    {
        if (archivo.Contenido?.Length > 0)
        {
            var base64 = Convert.ToBase64String(archivo.Contenido);
            var tipoLower = archivo.Tipo?.ToLower() ?? string.Empty;

            await EstadisticaService.ActualizarEstadisticasArchivo(archivo);

            codArchivoActual = archivo.CodigoArchivo;
            _stopwatch.Restart();

            var dotNetRef = DotNetObjectReference.Create(this);

            if (tipoLower.Contains("pdf"))
            {
                await JSRuntime.InvokeVoidAsync("abrirPdf", base64, dotNetRef);
            }
            else if (tipoLower.Contains("plain"))
            {
                var texto = System.Text.Encoding.UTF8.GetString(archivo.Contenido);
                await JSRuntime.InvokeVoidAsync("mostrarTesto", texto, dotNetRef);
            }
            else if (tipoLower.StartsWith("image/"))
            {
                await JSRuntime.InvokeVoidAsync("mostrarImagen", base64, dotNetRef);
            }
            else
            {
                // No hay visor, se descarga directamente
                _stopwatch.Stop();
                await JSRuntime.InvokeVoidAsync("descargarArchivo", base64, archivo.Tipo, archivo.NombreArchivo);
                await EstadisticaService.GuardarTiempoVisualizacion(archivo.CodigoArchivo, _stopwatch.Elapsed);
            }
        }
    }

    [JSInvokable]
    public async Task OnVisorCerrado()
    {
        _stopwatch.Stop();

        if (codArchivoActual.HasValue)
        {
            await EstadisticaService.GuardarTiempoVisualizacion((int)codArchivoActual, _stopwatch.Elapsed);
            codArchivoActual = null;
        }

        StateHasChanged();
    }


    private void MostrarArchivosDeCarpeta(Carpeta carpeta)
    {
        Navigation.NavigateTo($"/home/{CodigoCurso}/{carpeta.CodigoCarpeta}");
        StateHasChanged();
    }

    async Task AbrirModalSubida()
    {
        if (modalAbierto) return;
        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<SubirArchivo>("Subir Archivo", new Dictionary<string, object>
        {
            { "CodigoCurso", CodigoCurso },
            { "CodigoUsuario", usuarioActual.CodigoUsuario },
            { "CodigoCarpeta", CodigoCarpeta},
            { "Grupo", GrupoFiltro}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbierto = false;
        if (resultado is bool archivoSubido && archivoSubido)
            await CargarArchivos();
        StateHasChanged();
    }

    async Task AbrirModalSubidaCarpeta(int opcion)
    {
        bool resultado = false;
        if (opcion == 1)
        {
            if (modalAbiertoCarpetaNueva) return;
            modalAbiertoCarpetaNueva = true;
            var parameters = new Dictionary<string, object>()
            {
                { "CodigoCurso", CodigoCurso },
                { "CodigoUsuario", usuarioActual.CodigoUsuario },
                { "CodigoOpcion", opcion },
                { "DescripcionCurso", cursoActual.Descripcion }, 
                { "Grupo", GrupoFiltro}
            };

            resultado = await DialogService.OpenAsync<SubirCarpeta>("Crear Carpeta", parameters, new DialogOptions { Width = "600px", Height = "auto" });
            modalAbiertoCarpetaNueva = false;
        }
        else
        {
            if (modalAbiertoCarpetaNueva) return;
            modalAbiertoCarpetaNueva = true;
            resultado = await DialogService.OpenAsync<SubirCarpeta>("Subir Carpeta", new Dictionary<string, object>
            {
                { "CodigoCurso", CodigoCurso },
                { "CodigoUsuario", usuarioActual.CodigoUsuario },
                { "CodigoOpcion", opcion },
                { "DescripcionCurso", cursoActual.Descripcion }, 
                { "Grupo", GrupoFiltro}
            }, new DialogOptions { Width = "600px", Height = "auto" });
            modalAbiertoCarpetaNueva = false;
        }
        if (resultado is bool archivoSubido && archivoSubido)
            await CargarArchivos();
        StateHasChanged();
    }


    private async Task CerrarSesion()
    {
        await AuthenticationService.Logout();
        Navigation.NavigateTo("/");
    }

    private string ObtenerIconoArchivo(string tipoArchivo)
    {
        return tipoArchivo switch
        {
            "application/pdf" => "icons/pdf.png",
            "text/plain" => "icons/plain.png",
            "application/msword" => "icons/word.png",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" => "icons/word.png",
            string t when t.StartsWith("image/") => "icons/imagen.png",
            _ => "icons/archivo.png"
        };
    }

    private string ObtenerIconoCarpeta() => "icons/carpeta.png";

    void ShowContextMenu(MouseEventArgs args, Archivo archivo)
    {
        clickArchivo = true;

        var allItems = new List<ContextMenuItem>
            { 
                new ContextMenuItem(){ Text = "Ocultar/Mostrar", Value = "visibilidad", Icon = "visibility" },
                new ContextMenuItem(){ Text = "Estadísticas", Value = "estadisticas", Icon = "bar_chart" },
                new ContextMenuItem(){ Text = "Cambiar Fecha", Value = "cambiar_fecha", Icon = "event" },
                new ContextMenuItem(){ Text = "Etiquetas", Value = "etiquetas", Icon = "label" },
                new ContextMenuItem(){ Text = "Eliminar", Value = "eliminar", Icon = "delete" },
                new ContextMenuItem(){ Text = "Renombrar", Value = "renombrar", Icon = "edit" }
            };

        List<ContextMenuItem> itemsMostrar;

        if(usuarioActual.CodigoRol == rolUser){

            itemsMostrar = allItems.Where(x => x.Value == "estadisticas").ToList();
        }
        else{
            itemsMostrar = allItems;
        }

        ContextMenuService.Open(args, itemsMostrar, item => OnMenuItemClick(item, archivo));

        Task.Delay(300).ContinueWith(_ => clickArchivo = false);
    }

    void OnMenuItemClick(MenuItemEventArgs args, Archivo archivo)
    {
        switch (args.Value)
        {
            case "visibilidad":
                CambiarVisibilidad(archivo);
                Console.WriteLine($"Ocultando/Mostrando archivo: {archivo.NombreArchivo}");
                break;
            case "estadisticas":
                MostrarEstadisticas(archivo);
                Console.WriteLine($"Mostrando estadísticas de: {archivo.NombreArchivo}");
                break;
            case "cambiar_fecha":
                CarmbiarFecha(archivo);
                Console.WriteLine($"Cambiando fecha de: {archivo.NombreArchivo}");
                break;
            case "etiquetas":
                ModificarEtiquetas(archivo);
                Console.WriteLine($"Gestionando etiquetas de: {archivo.NombreArchivo}");
                break;
            case "eliminar":
                EliminarArchivo(archivo);
                Console.WriteLine($"Eliminando archivo: {archivo.NombreArchivo}");
                break;
            case "renombrar":
                RenombrarArchivo(archivo);
                Console.WriteLine($"Renombrando archivo: {archivo.NombreArchivo}");
                break;
        }
        ContextMenuService.Close();
    }

    public async void CambiarVisibilidad(Archivo archivo)
    {
        string visible = "";
        if (archivo.Visible)
        {
            visible = "ocultar";
        }
        else visible = "mostrar";

        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres " + visible + " este documento?", "Confirmar",
           new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });
        if (confirmacion == true)
        {
            archivo.Visible = !archivo.Visible;
            await ArchivoService.ModificarArchivo(archivo);
            await CargarArchivos();
        }
       
        StateHasChanged();
    }

    public async void MostrarEstadisticas(Archivo archivo)
    {
        if (modalAbiertoEstadisticas) return;
        modalAbiertoEstadisticas = true;
        var resultado = await DialogService.OpenAsync<MostrarEstadisticasArchivo>("Estadísticas documento", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo },
            { "NombreArchivo", archivo.NombreArchivo }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoEstadisticas = false;
    }

    public async void CarmbiarFecha(Archivo archivo)
    {
        if (modalAbiertoFecha) return;
        modalAbiertoFecha = true;
        var resultado = await DialogService.OpenAsync<ModificarFechaArchivo>("Modificar Fecha", new Dictionary<string, object>
        {
            { "CodigoUsuario", usuarioActual.CodigoUsuario },
            { "CodigoArchivo", archivo.CodigoArchivo }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoFecha = false;
    }

    public async void ModificarEtiquetas(Archivo archivo)
    {
        if (modalAbiertoEtiquetas) return;
        modalAbiertoEtiquetas = true;
        var resultado = await DialogService.OpenAsync<ModificarEtiquetas>("Etiquetas documento", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoEtiquetas = false;
    }

    public async Task EliminarArchivo(Archivo archivo)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres eliminar este documento?", "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí, eliminar", CancelButtonText = "Cancelar" });
        if (confirmacion == true)
        {
            await ArchivoService.EliminarArchivo(archivo.CodigoArchivo);
        }
        await CargarArchivos();
        StateHasChanged();
    }

    public async void RenombrarArchivo(Archivo archivo)
    {
        if (modalAbiertoRenombrar) return;
        modalAbiertoRenombrar = true;
        var resultado = await DialogService.OpenAsync<RenombrarArchivo>("Renombrar Archivo", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoRenombrar = false;
        await CargarArchivos();
        StateHasChanged();
    }

    void ShowContextMenuWithItems(MouseEventArgs args)
    {
        if (clickArchivo) return;

        if(usuarioActual.CodigoRol != rolUser){
            ContextMenuService.Open(args,
                new List<ContextMenuItem>
                {
                    new ContextMenuItem(){ Text = "Subir Archivo", Value = 1, Icon = "upload" },
                    new ContextMenuItem(){ Text = "Subir Carpeta", Value = 2, Icon = "create_new_folder" },
                    new ContextMenuItem(){ Text = "Crear Carpeta", Value = 3, Icon = "create_new_folder" },
                },
            OnMenuItemClickGeneral);
        }

    }

    void OnMenuItemClickGeneral(MenuItemEventArgs args)
    {
        switch (args.Value)
        {
            case 1:
                AbrirModalSubida();
                break;
            case 2:
                AbrirModalSubidaCarpeta(2);
                break;
            case 3:
                AbrirModalSubidaCarpeta(1);
                break;
        }
        ContextMenuService.Close();
        CargarArchivos();
        StateHasChanged();
    }

    void ShowContextMenuCarpeta(MouseEventArgs args, Carpeta carpeta)
    {
        clickArchivo = true;

        if(usuarioActual.CodigoRol != rolUser){
            ContextMenuService.Open(args,
                new List<ContextMenuItem>
                    {
                        new ContextMenuItem(){ Text = "Eliminar", Value = "eliminar", Icon = "delete" },
                        new ContextMenuItem(){ Text = "Renombrar", Value = "renombrar", Icon = "edit" }
                    },
                item => OnMenuItemCarpetaClick(item, carpeta));
                Task.Delay(300).ContinueWith(_ => clickArchivo = false);
        }

    }

    void OnMenuItemCarpetaClick(MenuItemEventArgs args, Carpeta carpeta)
    {
        switch (args.Value)
        {
            case "eliminar":
                EliminarCarpeta(carpeta);
                Console.WriteLine($"Eliminando carpeta: {carpeta.Descripcion}");
                break;
            case "renombrar":
                RenombrarCarpeta(carpeta);
                Console.WriteLine($"Renombrando carpeta: {carpeta.Descripcion}");
                break;
        }
        ContextMenuService.Close();
    }

    public async Task EliminarCarpeta(Carpeta carpeta)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres eliminar esta carpeta?", "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí, eliminar", CancelButtonText = "Cancelar" });
        if (confirmacion == true)
        {
            await CarpetaService.EliminarCarpeta(carpeta);
        }
        await CargarArchivos();
        StateHasChanged();
    }

    public async void RenombrarCarpeta(Carpeta carpeta)
    {
        if (modalAbiertoRenombrarCarpeta) return;
        modalAbiertoRenombrarCarpeta = true;
        var resultado = await DialogService.OpenAsync<RenombrarCarpeta>("Renombrar Carpeta", new Dictionary<string, object>
        {
            { "CodigoCarpeta", carpeta.CodigoCarpeta }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoRenombrarCarpeta = false;
        await CargarArchivos();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task MoverArchivoACarpeta(int archivoId, int carpetaId)
    {
        try
        {
            var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres mover el archivo a la carpeta?", "Confirmar mover archivo",
            new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });
            if (confirmacion == true)
            {
                var archivo = await ArchivoService.ObtenerInfoArchivo(archivoId);
                if (archivo != null)
                {
                    archivo.CodigoCarpeta = carpetaId;
                    await ArchivoService.ModificarArchivo(archivo);
                    Console.WriteLine("Archivo movido correctamente");
                    await CargarArchivos();
                    StateHasChanged();
                }
                else
                {
                    Console.Error.WriteLine("Archivo o Carpeta no encontrados");
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error moviendo archivo: {ex.Message}");
        }
    }
}
