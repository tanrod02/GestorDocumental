@page "/MostrarCarpeta/{CodigoCarpeta:int}/{CodigoUsuario:int}/{DescripcionCurso}"
@layout MainLayout
@rendermode InteractiveServer
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@inject IArchivoService ArchivoService
@inject ICarpetaService CarpetaService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService AuthenticationService
@inject ContextMenuService ContextMenuService
@using Radzen
@using Radzen.Blazor

<div class="header-container">
    <h1 class="header-title">Documentos</h1>
    <div class="header-menu">
        <RadzenProfileMenu>
            <Template>
                @if (usuarioActual != null)
                {
                    <span>Bienvenido, @usuarioActual.Nombre</span>
                }
            </Template>
            <ChildContent>
                <RadzenProfileMenuItem Text="Cerrar sesión" Path="" Icon="exit_to_app" @onclick="CerrarSesion"></RadzenProfileMenuItem>
            </ChildContent>
        </RadzenProfileMenu>
    </div>
</div>


<div class="curso-toggle-container">

    <button class="back-button" @onclick="VolverHome" style="border: none; background: transparent; cursor: pointer;">
        <span style="font-size: 1.5rem; color: #007bff;">←</span>
    </button>

    <span class="carpeta-nombre">@DescripcionCurso / @carpetaActual.Descripcion</span>

    <button class="toggle-view-button" @onclick="ToggleVista">
        @(modoTarjetas ? "📄 Ver en Lista" : "🗂️ Ver en Iconos Grandes")
    </button>
</div>



@if (modoTarjetas)
{
    <div class="tarjetas-container" oncontextmenu="return false;">
        @foreach (var a in archivos)
        {
            if(a.Visible == true){
                <RadzenCard class="rz-my-12 rz-mx-auto"
                Style="max-width: 420px; background: transparent; box-shadow: none; border: none;"
                @ondblclick="() => VerContenidoArchivo(a)"
                @oncontextmenu="args => ShowContextMenu(args, a)">

                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4">
                        <RadzenImage Path="@ObtenerIconoArchivo(a.Tipo)" Style="width: 50px; height: 50px;" />
                        <RadzenText TextStyle="TextStyle.Body1">
                            <a href="javascript:void(0);"
                            @onclick="() => VerContenidoArchivo(a)"
                            style="color: black; text-decoration: none; font-weight: bold;">
                                @a.NombreArchivo
                            </a>
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>

            }

        }
    </div>
}

<button class="boton-flotante" type="button" @onclick="AbrirModalSubida">
    📤 Subir Documento
</button>

@code {
    [Parameter] public int CodigoCarpeta { get; set; }
    [Parameter] public int CodigoUsuario { get; set; }
    [Parameter] public string DescripcionCurso { get; set; }
    public Usuario usuarioActual = new Usuario();
    public Carpeta carpetaActual = new Carpeta();
    private IEnumerable<Archivo> archivos = new List<Archivo>();
    private bool modoTarjetas = true;
    private bool modalAbierto = false;
    private bool modalAbiertoFecha = false;
    private bool modalAbiertoRenombrar = false;
    private bool modalAbiertoEstadisticas = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            usuarioActual = await AuthenticationService.ObtenerUsuarioActualAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await CargarCarpeta();
        await CargarArchivosCarpeta();
        carpetaActual = await ArchivoService.ObtenerInfoCarpeta(CodigoCarpeta);
        StateHasChanged();
    }

    private async Task CargarCarpeta()
    {
        try
        {
            if (CodigoCarpeta != 0)
            {
                carpetaActual = await ArchivoService.ObtenerInfoCarpeta(CodigoCarpeta);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarCurso: {e.Message}");
        }
    }

    private async Task CargarArchivosCarpeta()
    {
        try
        {
            if (CodigoCarpeta != 0)
            {
                archivos = await CarpetaService.ObtenerArchivosCarpeta(CodigoCarpeta);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en CargarCurso: {e.Message}");
        }
    }

    private string ObtenerIconoArchivo(string tipoArchivo)
    {
        return tipoArchivo switch
        {
            "application/pdf" => "icons/pdf.png"
        };
    }

    async Task VerContenidoArchivo(Archivo archivo)
    {
        if (archivo.Tipo == "application/pdf" && archivo.Contenido?.Length > 0)
        {
            var base64 = Convert.ToBase64String(archivo.Contenido);
            await JSRuntime.InvokeVoidAsync("abrirPdfDesdeBytes", base64);
        }
    }

    private void ToggleVista()
    {
        modoTarjetas = !modoTarjetas;
    }

    private async Task CerrarSesion()
    {
        await AuthenticationService.Logout();
        Navigation.NavigateTo("/");
    }

    async Task AbrirModalSubida()
    {
        if (modalAbierto) return;
        modalAbierto = true;
        var resultado = await DialogService.OpenAsync<SubirArchivo>("Subir Archivo", new Dictionary<string, object>
        {
            { "CodigoCurso", carpetaActual.Curso },
            { "CodigoUsuario", usuarioActual.CodigoUsuario }
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbierto = false;
        if (resultado is bool archivoSubido && archivoSubido) await CargarArchivosCarpeta();
    }

    void ShowContextMenu(MouseEventArgs args, Archivo archivo)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Ocultar/Mostrar", Value = "visibilidad", Icon = "visibility" },
                new ContextMenuItem(){ Text = "Estadísticas", Value = "estadisticas", Icon = "bar_chart" },
                new ContextMenuItem(){ Text = "Cambiar Fecha", Value = "cambiar_fecha", Icon = "event" },
                new ContextMenuItem(){ Text = "Etiquetas", Value = "etiquetas", Icon = "label" },
                new ContextMenuItem(){ Text = "Eliminar", Value = "eliminar", Icon = "delete" },
                new ContextMenuItem(){ Text = "Renombrar", Value = "renombrar", Icon = "edit" }
                },
            item => OnMenuItemClick(item, archivo));
    }

    void OnMenuItemClick(MenuItemEventArgs args, Archivo archivo)
    {
        switch (args.Value)
        {
            case "visibilidad":
                CambiarVisibilidad(archivo);
                Console.WriteLine($"Ocultando/Mostrando archivo: {archivo.NombreArchivo}");
                break;
            case "estadisticas":
                MostrarEstadisticas(archivo);
                Console.WriteLine($"Mostrando estadísticas de: {archivo.NombreArchivo}");
                break;
            case "cambiar_fecha":
                CarmbiarFecha(archivo);
                Console.WriteLine($"Cambiando fecha de: {archivo.NombreArchivo}");
                break;
            case "etiquetas":
                ModificarEtiquetas(archivo);
                Console.WriteLine($"Gestionando etiquetas de: {archivo.NombreArchivo}");
                break;
            case "eliminar":
                EliminarArchivo(archivo);
                Console.WriteLine($"Eliminando archivo: {archivo.NombreArchivo}");
                break;
            case "renombrar":
                RenombrarArchivo(archivo);
                Console.WriteLine($"Renombrando archivo: {archivo.NombreArchivo}");
                break;
        }
        ContextMenuService.Close();
    }

    public async void CambiarVisibilidad(Archivo archivo)
    {
        if (archivo.Visible == true)
        {
            archivo.Visible = false;
        }
        else archivo.Visible = true;

        await ArchivoService.ModificarArchivo(archivo);

        StateHasChanged();
    }

    public async void MostrarEstadisticas(Archivo archivo)
    {
        if (modalAbiertoEstadisticas) return;
        modalAbiertoEstadisticas = true;
        var resultado = await DialogService.OpenAsync<MostrarEstadisticasArchivo>("Modificar Fecha", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo},
            { "NombreArchivo", archivo.NombreArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoEstadisticas = false;
    }

    public async void CarmbiarFecha(Archivo archivo)
    {
        if (modalAbiertoFecha) return;
        modalAbiertoFecha = true;
        var resultado = await DialogService.OpenAsync<ModificarFechaArchivo>("Modificar Fecha", new Dictionary<string, object>
        {
            { "CodigoUsuario", usuarioActual.CodigoUsuario },
            { "CodigoArchivo", archivo.CodigoArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoFecha = false;

    }

    public async void ModificarEtiquetas(Archivo archivo)
    {

    }

    public async Task EliminarArchivo(Archivo archivo)
    {
        var confirmacion = await DialogService.Confirm("¿Estás seguro de que quieres eliminar este archivo?", "Confirmar eliminación",
            new ConfirmOptions { OkButtonText = "Sí, eliminar", CancelButtonText = "Cancelar" });

        if (confirmacion == true) 
        {
            await ArchivoService.EliminarArchivo(archivo.CodigoArchivo);

        }

        await CargarArchivosCarpeta();
        StateHasChanged();
    }


    public async void RenombrarArchivo(Archivo archivo)
    {
        if (modalAbiertoRenombrar) return;
        modalAbiertoRenombrar = true;
        var resultado = await DialogService.OpenAsync<RenombrarArchivo>("Renombrar Archivo", new Dictionary<string, object>
        {
            { "CodigoArchivo", archivo.CodigoArchivo}
        }, new DialogOptions { Width = "600px", Height = "auto" });
        modalAbiertoRenombrar = false;

        await CargarArchivosCarpeta();
        StateHasChanged();
    }

    private void VolverHome()
    {
        Navigation.NavigateTo($"/home/{carpetaActual.Curso}");
    }
}
