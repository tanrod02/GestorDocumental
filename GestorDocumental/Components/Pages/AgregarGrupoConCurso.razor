@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@inject IGrupoService GrupoService
@inject DialogService DialogService
@using Radzen
@using Radzen.Blazor

<div class="modal-container">
    <RadzenTemplateForm Data="@nuevoGrupoModel">
        <div class="form-group">
            <label>Curso:</label>
            <RadzenDropDown TValue="int"
                            @bind-Value="nuevoGrupoModel.CodigoCurso"
                            Data="@Cursos"
                            TextProperty="Descripcion"
                            ValueProperty="CodigoCurso"
                            Style="width: 100%;"
                            Name="curso" />
        </div>
        <div class="form-group">
            <label>Nombre del Grupo:</label>
            <RadzenTextBox @bind-Value="nuevoGrupoModel.Grupo"
                           Style="width: 100%;"
                           Name="Grupo"
                           Placeholder="Ingresa el nombre del grupo" />
        </div>
        <div class="form-group" style="margin-top:10px;">
            <RadzenButton Text="Aceptar" Icon="check"
                          ButtonStyle="ButtonStyle.Primary"
                          Click="@OnAceptar"
                          Style="margin-right: 10px;" />
            <RadzenButton Text="Cancelar" Icon="close"
                          ButtonStyle="ButtonStyle.Secondary"
                          Click="@OnCancelar" />
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: red;">@errorMessage</div>
        }
    </RadzenTemplateForm>
</div>

@code {
    // Si se desea dejar la opción de preseleccionar el curso, se puede recibir un parámetro opcional
    [Parameter] public int? CodigoCurso { get; set; }
    [Parameter] public List<Curso> Cursos { get; set; } = new List<Curso>();

    private Grupos nuevoGrupoModel = new Grupos();
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        // Se preselecciona el curso si se recibió el parámetro
        if (CodigoCurso.HasValue)
        {
            nuevoGrupoModel.CodigoCurso = CodigoCurso.Value;
        }
    }

    async Task OnAceptar()
    {
        if (string.IsNullOrWhiteSpace(nuevoGrupoModel.Grupo))
        {
            errorMessage = "El nombre del grupo es obligatorio.";
            return;
        }

        try
        {
            await GrupoService.AgregarGrupo(nuevoGrupoModel);
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al agregar el grupo: {ex.Message}";
        }
    }

    void OnCancelar()
    {
        DialogService.Close(false);
    }
}
