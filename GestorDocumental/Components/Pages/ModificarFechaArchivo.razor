@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@inject IArchivoService ArchivoService
@inject DialogService DialogService
@rendermode InteractiveServer

<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">

    <div style="display: flex; flex-direction: column; gap: 15px;">

        <div>
            <label><b>Nombre del archivo:</b></label>
            <p>@archivoActual.NombreArchivo</p>
        </div>

        <div>
            <label><b>Fecha actual de baja:</b></label>
            @if(archivoActual.FechaBaja != null){
                <p>@archivoActual.FechaBaja?.ToString("dd/MM/yyyy")</p>
            }else  {
                <p>No tiene fecha baja</p>
            }
           
        </div>

        <div>
            <label><b>Seleccione la nueva fecha:</b></label>
            <RadzenDatePicker Value="@nuevaFechaBaja"
            ValueChanged="@((DateTime? value) => nuevaFechaBaja = value)"
            Style="width: 100%;" />
        </div>

        <div class="botones" style="display: flex; justify-content: space-between;">
            <RadzenButton Text="Modificar"
            Click="ModificarFechaBaja"
            ButtonStyle="ButtonStyle.Primary" />

            <RadzenButton Text="Cancelar"
            ButtonStyle="ButtonStyle.Secondary"
            Click="Cancelar" />
        </div>
    </div>
</RadzenCard>



@code {
    RadzenUpload upload;

    [Parameter] public int CodigoUsuario { get; set; }
    [Parameter] public int CodigoArchivo { get; set; }

    private Archivo archivoActual = new() { };
    private DateTime? nuevaFechaBaja = null;


    protected override async Task OnParametersSetAsync()
    {
        await CargarArchivo();
    }

    private async Task CargarArchivo()
    {
        try
        {
            if (CodigoArchivo != 0)
            {
                archivoActual = await ArchivoService.ObtenerInfoArchivo(CodigoArchivo);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error en ObtenerInfoArchivo: {e.Message}");
        }
    }

    private void OnProgress(UploadProgressArgs args)
    {
        StateHasChanged();
    }

    private async Task ModificarFechaBaja()
    {
        archivoActual.FechaBaja = nuevaFechaBaja;
        
        var confirmacion = await DialogService.Confirm("¿Quiere modificar la fecha baja del documento?", "Confirmar modificar fecha documento",
          new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });

        if(confirmacion == true){
            await ArchivoService.ModificarArchivo(archivoActual);
        }
       


        DialogService.Close(true);
    }

    private void Cancelar()
    {
        DialogService.Close(false);
    }
}

