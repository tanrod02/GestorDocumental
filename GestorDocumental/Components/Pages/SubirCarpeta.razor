@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations;
@using GestorDocumental.Business.Interfaces
@using GestorDocumental.Data.Entities
@using Radzen
@using Radzen.Blazor
@using Microsoft.JSInterop
@using System.IO
@inject ICarpetaService CarpetaService
@inject IArchivoService ArchivoService
@inject DialogService DialogService
@inject IJSRuntime JS
@rendermode InteractiveServer
<RadzenCard Style="padding: 20px; max-width: 600px; margin: auto;">
    <EditForm Model="@carpetaNueva" OnValidSubmit="ConfirmarSubida">
        <DataAnnotationsValidator />

        <div style="display: flex; flex-direction: column; gap: 15px;">
            @if (CodigoOpcion == 1) // crear carpeta
            {
                <div>
                    <label>Nombre:</label>
                    <RadzenTextBox @bind-Value="carpetaNueva.Descripcion" Placeholder="Nombre carpeta" Style="width: 100%;" />
                    <ValidationMessage For="@(() => carpetaNueva.Descripcion)" class="text-danger" />
                </div>

                <div>
                    <label>Grupo: </label>
                    <RadzenDropDown @bind-Value="carpetaNueva.Grupo"
                    Data="@grupos"
                    TextProperty="Grupo"
                    ValueProperty="Grupo"
                    Placeholder="Selecciona un grupo"
                    Style="width: 100%;" />
                </div>

                <div class="botones" style="display: flex; justify-content: space-between;">
                    <RadzenButton Text="Guardar" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />

                    <RadzenButton Text="Cancelar"
                    ButtonStyle="ButtonStyle.Secondary"
                    Click="CancelarSubida" />
                </div>
            }
            else // subir una carpeta
            {
                <div>
                    <label>Selecciona una carpeta:</label>
                    <RadzenButton Text="Seleccionar Carpeta" Click="AbrirSelectorCarpeta" />
                    <p>@carpetaNueva.Descripcion</p>
                </div>

                @if (!carpetaSeleccionada)
                {
                    <div style="color: red;">Debes seleccionar una carpeta.</div>
                }

                <div>
                    <label>Grupo: </label>
                    <RadzenDropDown @bind-Value="carpetaNueva.Grupo"
                    Data="@grupos"
                    TextProperty="Grupo"
                    ValueProperty="Grupo"
                    Placeholder="Selecciona un grupo"
                    Style="width: 100%;" />
                    
                </div>

                <div class="botones" style="display: flex; justify-content: space-between;">
                    <RadzenButton Text="Guardar" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />

                    <RadzenButton Text="Cancelar"
                    ButtonStyle="ButtonStyle.Secondary"
                    Click="CancelarSubida" />
                </div>
            }
        </div>
    </EditForm>
</RadzenCard>



@code {
    RadzenUpload upload;

    [Parameter] public int CodigoCurso { get; set; }
    [Parameter] public int CodigoUsuario { get; set; }
    [Parameter] public int CodigoOpcion { get; set; }
    [Parameter] public string DescripcionCurso{ get; set; }
    [Parameter] public string Grupo { get; set; }

    private Carpeta carpetaNueva = new() { };
    private List<Archivo> archivos = new List<Archivo>();
    private List<Grupos> grupos = new();

    private ElementReference fileInputElement;

    private bool carpetaSeleccionada = false;

    protected override async Task OnInitializedAsync()
    {
       
        grupos = await ArchivoService.ObtenerGruposPorCurso(CodigoCurso);

        if (!string.IsNullOrEmpty(Grupo))
        {
            carpetaNueva.Grupo = Grupo;
        }
    }


    private void OnProgress(UploadProgressArgs args)
    {
        StateHasChanged();
    }

    private async Task AbrirSelectorCarpeta()
    {
        var result = await JS.InvokeAsync<FolderResult>("abrirSelectorCarpeta");

        if (result != null)
        {
            carpetaNueva.Descripcion = result.NombreCarpeta; 
            archivos = result.Archivos.Select(a => new Archivo
                {
                    NombreArchivo = a.Nombre,
                    Tipo = a.Tipo,
                    Contenido = a.Contenido.ToArray(),
                    Tamaño = a.Tamaño,
                    FechaAlta = DateTime.Now,
                    Visible = true
                }).ToList();

            carpetaSeleccionada = !carpetaSeleccionada;
        }
    }

    private void CancelarArchivo()
    {
        carpetaNueva = new Carpeta();
        StateHasChanged();
    }

    private async Task ConfirmarSubida()
    {

        if (CodigoOpcion != 1 &&  !carpetaSeleccionada)
        {
            return;
        }

        var confirmacion = await DialogService.Confirm("¿Quiere subir la carpeta?", "Confirmar subir carpeta",
         new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "Cancelar" });

        if (confirmacion == true)
        {
            if (CodigoOpcion == 1)
            {
                carpetaNueva.Path = DescripcionCurso + "/" + carpetaNueva.Descripcion;
                carpetaNueva.Subida = DateTime.Now;
                carpetaNueva.Propietario = CodigoUsuario;
                carpetaNueva.Curso = CodigoCurso;
                carpetaNueva.Grupo = Grupo;
                await CarpetaService.CrearCarpeta(carpetaNueva);

                DialogService.Close(true);
            }
            else
            {
                carpetaNueva.Path = DescripcionCurso + "/" + carpetaNueva.Descripcion;
                carpetaNueva.Subida = DateTime.Now;
                carpetaNueva.Propietario = CodigoUsuario;
                carpetaNueva.Curso = CodigoCurso;
                carpetaNueva.Grupo = Grupo;
                int codigoCarpeta = await CarpetaService.CrearCarpeta(carpetaNueva);


                foreach (Archivo archivo in archivos)
                {
                    archivo.Curso = CodigoCurso;
                    archivo.Propietario = CodigoUsuario;
                    archivo.CodigoCarpeta = codigoCarpeta;
                    archivo.Grupo = carpetaNueva.Grupo;
                }
                await ArchivoService.GuardarListaArchivoAsync(archivos);
                DialogService.Close(true);
            }
        }

        
    }

    private void CancelarSubida()
    {
        DialogService.Close(false);
    }

    public class FolderResult
    {
        public string NombreCarpeta { get; set; }
        public List<FileResult> Archivos { get; set; }
    }


    public class FileResult
    {
        public string Nombre { get; set; }
        public string Tipo { get; set; }
        public List<byte> Contenido { get; set; }
        public int Tamaño { get; set; }
    }

}
